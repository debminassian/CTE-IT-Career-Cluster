{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Unit 2 Numeric Operations, Augmentation, Time","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNlvTUWWiNCDmVgSy2JUlJy"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"QzfZk1xfljRM"},"source":["[Learning Plan Index](https://docs.google.com/document/d/1B5yWb6wCSRhqD42iWxCi7bmLPY2EqvU6pbiEQT0zs20/edit?usp=sharing)\n","\n","\n","[02P - 01 - Unit 2 Elementary Programming Problems](https://docs.google.com/document/d/1kdbDF0OQypdztTYIsnCDIhsNnVNgO_vWC1rN73wCvU8/edit?usp=sharing)\n","# Numeric Operations \n","\n","[W3Schools Reference for Numeric Operations and Augmented Assignment Operators](https://www.w3schools.com/python/python_operators.asp)\n","\n","PEMDAS applies to Python math\n","1. Exponents happen from left to right if there is more than one\n","2. Anything inside paranthesis\n","3. Multiplication *, Float Division /, Integer Division //, Modulus % - Will happen left to right if more than one\n","4. Addition +, Subtraction - Will happen left to right if more than one\n","\n","\"+\" Addition    35 + 1 = 36\n","\n","\"-\"  Subtraction   35 - 1 = 34\n","\n","\"*\"  Multiplication    10 * 5 = 500\n","\n","\"/\"  Float Division     1 / 2 = 0.5\n","\n","\"//\"  Integer Division     1 // 2  = 0\n","\n","\"**\"  Exponents   4.0 ** 0.5 = 2\n","\n","\"%\"  Modulus ( returns the remainder from division)   20 % 3 = 2"]},{"cell_type":"code","metadata":{"id":"9jTT61uUv1lD","colab":{"base_uri":"https://localhost:8080/","height":136},"executionInfo":{"status":"ok","timestamp":1581011121065,"user_tz":300,"elapsed":431,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAal7SoN20VzbrHnHUoXsjoNTa9aDC6aG5vGpPl=s64","userId":"02111247687678533158"}},"outputId":"a39993a6-65cc-427b-bfd1-4d6b296038f0"},"source":["print(\"1. Addition - 35 + 1 = \", end = '')\n","print(35 + 1)\n","\n","print(\"2. Subtraction - 35 - 1 = \", end = '')\n","print(35 - 1)\n","\n","print(\"3. Multiplication - 10 * 5 = \", end = '')\n","print(10 * 5)\n","\n","print(\"4. Float Division - 1 / 2 = \", end = '')\n","print(1 / 2)\n","\n","print(\"5. Integer Division - 10 // 3 = \", end = '')\n","print(10 // 3)\n","\n","print(\"6. Exponents - 4 ** 2 = \", end = '')\n","print(4 ** 2)\n","\n","print(\"7. Modulus - 20 % 3 = \", end = '')\n","print(20 % 3)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. Addition - 35 + 1 = 36\n","2. Subtraction - 35 - 1 = 34\n","3. Multiplication - 10 * 5 = 50\n","4. Float Division - 1 / 2 = 0.5\n","5. Integer Division - 10 // 3 = 3\n","6. Exponents - 4 ** 2 = 16\n","7. Modulus - 20 % 3 = 2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"aR5gXlDjxaG_"},"source":["# Augmented Assignment Operators\n","\n","We often need to increment (increase) and decrement (decrease) variables, as well as manipulate their original value through other mathematical operations.  In all of the examples below I am changing the original value of a variable to a new value.  We only do this some of the time in programming.  In some cases I may create a new variable to hold the new value while not changing the original variable value.\n","\n","if x = 5 I could change the value of x by coding x = x + 1 so that x is now 6.  Alternatively if x = 5 I could code y = x + 1 so that y = 6, while x remains unchanged as x =5.\n","\n","Other languages allow for shorthand incrementation like x++ to increment x, but python DOES NOT."]},{"cell_type":"code","metadata":{"id":"XJnFN46S-OWU","colab":{"base_uri":"https://localhost:8080/","height":476},"executionInfo":{"status":"ok","timestamp":1581013504677,"user_tz":300,"elapsed":273,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAal7SoN20VzbrHnHUoXsjoNTa9aDC6aG5vGpPl=s64","userId":"02111247687678533158"}},"outputId":"820532da-fb3a-46aa-aa96-413a2fdfee78"},"source":["#********   Increment  ************\n","print(\"1. A = 5, increment by one.  Can be done as A = A + 1 or shorthand A += 1 \")\n","print(\"2. A = A + 1 Result \", end = '')\n","A = 5    # set A to starting value\n","A = A + 1  #increment A by 1\n","print(A)  #output A\n","\n","print(\"3. A += 1 Result \", end = '')\n","A = 5  #reset A\n","A += 1  #increment A by 1\n","print(A)  #output A\n","print()  #output a blank line between concepts\n","\n","#********   Decrement  ************\n","print(\"4. B = 5, Decrement by one.  Can be done as B = B - 1 or shorthand B -= 1 \")\n","print(\"5. B = B - 1 Result \", end = '')\n","B = 5    # set B to starting value\n","B = B - 1  #increase B by 1\n","print(B)  #output B\n","\n","print(\"6. B -= 1 Result \", end = '')\n","B = 5  #reset B\n","B -= 1  #increase B by 1\n","print(B)  #output B\n","print()  #output a blank line between concepts\n","\n","#********   Multiplication  ************\n","print(\"7. C = 5, Multiplied by 2.  Can be done as C = C * 2 or shorthand C *= 2 \")\n","print(\"8. C = C * 2 Result \", end = '')\n","C = 5    # set C to starting value\n","C = C * 2  #Increase C by multiple of 2\n","print(C)  #output C\n","\n","print(\"9. C *= 5 Result \", end = '')\n","C = 5  #reset C\n","C *= 2  #Increase C by multiple of 2\n","print(C)  #output C\n","print()  #output a blank line between concepts\n","\n","#********   Float Division  ************\n","print(\"10. D = 9, Float Divided by 2.  Can be done as D = D / 2 or shorthand D /= 2 \")\n","print(\"11. D = D / 2 Result \", end = '')\n","D = 9    # set D to starting value\n","D = D / 2  #float divide D by 2\n","print(D)  #output D\n","\n","print(\"12. D /= 2  Result \", end = '')\n","D = 9  #reset D\n","D /= 2  #float divide D by 2\n","print(D)  #output D\n","print()  #output a blank line between concepts\n","\n","#********   Integer Division  ************\n","print(\"13. E = 9, Integer Divided by 2.  Can be done as E = E // 2 or shorthand E //= 2 \")\n","print(\"14. E = E // 2 Result \", end = '')\n","E = 9    # set E to starting value\n","E = E // 2  #integer divide E by 2\n","print(E)  #output E\n","\n","print(\"15. E //= 2  Result \", end = '')\n","E = 9  #reset E\n","E //= 2  #integer divide E by 2\n","print(E)  #output E\n","print()  #output a blank line between concepts\n","\n","#********   Modulus Assignment  ************\n","print(\"16. F = 9, Modulus Divided by 2.  Can be done as F = F % 2 or shorthand F %= 2 \")\n","print(\"17. F = F % 2 Result \", end = '')\n","F = 9    # set F to starting value\n","F = F % 2  #modulus divide F by 2\n","print(F)  #output F\n","\n","print(\"18. F %= 2  Result \", end = '')\n","F = 9  #reset F\n","F %= 2  #modulus divide F by 2\n","print(F)  #output F\n","print()  #output a blank line between concepts\n","\n","#********   Exponent Assignment  ************\n","print(\"19. G = 4, raised to a power of 2(squared).  Can be done as G = G ** 2 or shorthand G **= 2 \")\n","print(\"20. G = G ** 2 Result \", end = '')\n","G = 4    # set G to starting value\n","G = G ** 2  #G raised to a power of 2\n","print(G)  #output G\n","\n","print(\"21. G **= 2  Result \", end = '')\n","G = 4  #reset G\n","G **= 2  #G raised to a power of 2\n","print(G)  #output G\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. A = 5, increment by one.  Can be done as A = A + 1 or shorthand A += 1 \n","2. A = A + 1 Result 6\n","3. A += 1 Result 6\n","\n","4. B = 5, Decrement by one.  Can be done as B = B - 1 or shorthand B -= 1 \n","5. B = B - 1 Result 4\n","6. B -= 1 Result 4\n","\n","7. C = 5, Multiplied by 2.  Can be done as C = C * 2 or shorthand C *= 2 \n","8. C = C * 2 Result 10\n","9. C *= 5 Result 10\n","\n","10. D = 9, Float Divided by 2.  Can be done as D = D / 2 or shorthand D /= 2 \n","11. D = D / 2 Result 4.5\n","12. D /= 2  Result 4.5\n","\n","13. E = 9, Integer Divided by 2.  Can be done as E = E // 2 or shorthand E //= 2 \n","14. E = E // 2 Result 4\n","15. E //= 2  Result 4\n","\n","16. F = 9, Modulus Divided by 2.  Can be done as F = F % 2 or shorthand F %= 2 \n","17. F = F % 2 Result 1\n","18. F %= 2  Result 1\n","\n","19. G = 4, raised to a power of 2(squared).  Can be done as G = G ** 2 or shorthand G **= 2 \n","20. G = G ** 2 Result 16\n","21. G **= 2  Result 16\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7E82IRB6CHi8"},"source":["#Code Tracing\n","\n","When you are trying to solve or workout a programming problem you should use code tracing.  For instance if you are given a programming problem to solve on a test it is extremely helpful to write down the variable names and then track how the values of those variables change while you mentally walk through a program.  You are always welcome to use paper to work out problems on tests, in fact it is encouraged.  Trying to solve a problem by tracking multiple values in your head is a great way to make a mistake.\n","\n","Example what are the final values of item and sums at the end of this loop?\n","\n","```python\n","sums = 0\n","item = 0\n","while item < 5:\n","  item += 1\n","  sums += item\n","  if sums > 4: break\n","print(sums)\n","```"]},{"cell_type":"code","metadata":{"id":"eujzx4pJD2jU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631202342794,"user_tz":240,"elapsed":256,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"792952e3-1329-4280-c4c7-4e3eabde1e4e"},"source":["sums = 0\n","item = 0\n","while item < 5:\n","  item += 1\n","  sums += item\n","  if sums > 4: break\n","print(\"sums =\",sums, \"item =\", item)"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["sums = 6 item = 3\n"]}]},{"cell_type":"markdown","metadata":{"id":"DB_i67oX_GBt"},"source":["# time\n","[time Module at Python.org](https://docs.python.org/3/library/time.html)\n","\n","Python has a time module that we can import and use for getting the current system time in seconds since the epoch which is January 1, 1970, 00:00:00 @ GMT (Greenwich Mean Time), which is 5 hours ahead of EST (Eastern Standard Time).  Using an import time and calling time.time() will return the number of seconds from the epoch.\n","\n","```python\n","import time\n","currentTime = time.time()\n","print(currentTime) # output would be 1612625498.051918 at time of writing this\n","totalSeconds = int(currentTime) #convert time to int to remove decimal milliseconds\n","currentSecond = totalSeconds % 60 #dividing seconds by the number of seconds in a minute will go in evenly with a remainder of the number of seconds in the current minute\n","#with another variable a user could convert the seconds to the total minutes within the seconds and then divide that number by 60 to find the remaining minutes in the current hour.  This process could be continued to extract the \n","```\n","\n","#datetime\n","[datetime Module at Python.org](https://docs.python.org/3/library/datetime.html#module-datetime)\n","\n","Python also has a datetime module that will also allow us to access elements of the current time and date.\n","```python\n","import datetime\n","\n","now = datetime.datetime.now()\n","print(now.year, now.month, now.day, now.hour, now.minute, now.second)\n","```\n","\n","#calendar\n","[calendar Module at Python.org](https://docs.python.org/3/library/calendar.html#module-calendar)\n","Finally python has a calendar module for accessing the current date and will allow programmers to work with and manipulate dates in their programs."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XK9FoFswE-ez","executionInfo":{"status":"ok","timestamp":1614629197403,"user_tz":300,"elapsed":393,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"cbcf806e-94bb-4df3-c5d7-302457ca2996"},"source":["#using python time\n","import time\n","currentTime = time.time()\n","print(\"1. Current seconds since 1/1/70 in GMT\", currentTime) # output would be 1612625498.051918 at time of writing this\n","totalSeconds = int(currentTime) #convert time to int to remove decimal milliseconds\n","#totalSeconds = (int)(time.time())  #this would have accomplished the same thing, this is casting forcing one data type into another datatype\n","print(\"2. Total seconds without decimal milliseconds\", totalSeconds)\n","currentSecond = totalSeconds % 60\n","print(\"3. Current second in the time right now\",currentSecond)\n","\n","\n","#using python datetime\n","import datetime\n","\n","now = datetime.datetime.now()\n","print(\"4. datetime year\", now.year)\n","print(\"5. datetime month\", now.month)\n","print(\"6. datetime day\", now.day)\n","print(\"7. datetime hour\", now.hour)\n","print(\"8. datetime hour adjusted to EST\", now.hour - 5)\n","print(\"9. datetime minute\", now.minute)\n","print(\"10. datetime second\", now.second)\n","\n","#below I am casting time to an integer and using modulus to generate a somewhat \n","#random number between 0-25\n","print(\"11. (int)(time.time()) % 26) = \",(int)(time.time()) % 26)\n","#below I am casting time to an integer and using modulus to generate a somewhat \n","#random number between 0-11\n","print(\"12. (int)(time.time()) % 12) = \",(int)(time.time()) % 12)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. Current seconds since 1/1/70 in GMT 1614629197.3149734\n","2. Total seconds without decimal milliseconds 1614629197\n","3. Current second in the time right now 37\n","4. datetime year 2021\n","5. datetime month 3\n","6. datetime day 1\n","7. datetime hour 20\n","8. datetime hour adjusted to EST 15\n","9. datetime minute 6\n","10. datetime second 37\n","11. (int)(time.time()) % 26) =  25\n","12. (int)(time.time()) % 12) =  1\n"],"name":"stdout"}]}]}