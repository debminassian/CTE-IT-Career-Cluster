{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"04 - Unit 4 Boolean Logic and Boolean Variables","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPoRJhbpprkZh4VsDuYzs7H"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"F15kiZLhtiFy"},"source":["[Learning Plan Index](https://docs.google.com/document/d/1B5yWb6wCSRhqD42iWxCi7bmLPY2EqvU6pbiEQT0zs20/edit?usp=sharing)\n","\n","\n","[04P - 01 - Unit 4 Selection Python Problems](https://docs.google.com/document/d/1b_3Wnc3aRuoKD4FpgPn7Kgo2Rrx3eaD_rUbugq2HrIQ/edit?usp=sharing)\n","\n","#Boolean Logic and Boolean Variables\n","Boolean logic deals with determining if things are true of false.  There are also Boolean variables, which can be either true or false.  The term Booleam comes from Mathematician [George Bool](https://en.wikipedia.org/wiki/George_Boole) who invented Boolean Algebra in the 1800's.\n","\n","We use comparision operators in Boolean statements to compare values to make a true or false selection in our Boolean statements.\n","\n","# Comparison Operators:\n","```\n","# Comparison Operators:\n","< less than\n","<= less than or equal to\n","> greater than\n",">= greater than or equal to\n","== equal to (MAKE SURE TO USE DOUBLE EQUALS TO COMPARE THINGS)\n","!= not equal to\n","```\n","\n","#Operator Precedence\n","The list below goes from top precedence to lowest\n","\n","```\n","# Operator Precedence\n","+ - (Unary plus and minus, ie -3)\n","** (exponents)\n","not\n","*, /, //, %  (Multiplication, division, integer division, modulus)\n","+, - (Addition, Subtraction)\n","<, <=, >, >= (Comparison)\n","==, != (Equality)\n","and\n","or\n","=, +=, -=, /=, //=, %=  (Assignment Operators)\n","```\n","\n","\n","Below are examples of these operators in use.\n"]},{"cell_type":"code","metadata":{"id":"KNYYETYztlL1","colab":{"base_uri":"https://localhost:8080/","height":319},"executionInfo":{"status":"ok","timestamp":1581622658823,"user_tz":300,"elapsed":357,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAal7SoN20VzbrHnHUoXsjoNTa9aDC6aG5vGpPl=s64","userId":"02111247687678533158"}},"outputId":"5c0e3a6a-e247-4b14-8dfd-29532329bb6f"},"source":["#what value of x will have the most print statements and vs. the number that gives the fewest.\n","x = 5\n","\n","print(\"x =\",x)\n","if(x < 9):\n","  print(\"1. Yes x is less than 9\")\n","  print(\"2. The Boolean Value of x < 9: \", x < 9)\n","print(\"3. The Boolean Value of x > 9: \", x > 9)\n","\n","print()\n","if(x <= 5):\n","  print(\"4. Yes x is less than or equal to 5\")\n","  print(\"5. The Boolean Value of x <= 5: \", x <= 5)\n","print(\"6. The Boolean Value of x >= 5: \", x >= 5)\n","\n","print()\n","if(x > 4):\n","  print(\"7. Yes x is greater than 4\")\n","  print(\"8. The Boolean Value of x > 4: \", x > 4)\n","print(\"9. The Boolean Value of x < 4: \", x < 4)\n","\n","print()\n","if(x >= 5):\n","  print(\"10. Yes x is greater than or equal to 5\")\n","  print(\"11. The Boolean Value of x >= 5: \", x >= 5)\n","print(\"12. The Boolean Value of x <= 5: \", x <= 5)\n","\n","print()\n","if(x == 5):\n","  print(\"13. Yes x is equal to 5\")\n","  print(\"14. The Boolean Value of x == 5: \", x == 5)\n","print(\"15. The Boolean Value of x != 5: \", x != 5)\n","\n","\n","print()\n","if(x != 6):\n","  print(\"16. Yes x is not equal to 6\")\n","  print(\"17. The Boolean Value of x != 6: \", x != 6)\n","print(\"18. The Boolean Value of x == 6: \", x == 6)\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["x = 6\n","1. Yes x is less than 9\n","2. The Boolean Value of x < 9:  True\n","3. The Boolean Value of x > 9:  False\n","\n","6. The Boolean Value of x >= 5:  True\n","\n","7. Yes x is greater than 4\n","8. The Boolean Value of x > 4:  True\n","9. The Boolean Value of x < 4:  False\n","\n","10. Yes x is greater than or equal to 5\n","11. The Boolean Value of x >= 5:  True\n","12. The Boolean Value of x <= 5:  False\n","\n","15. The Boolean Value of x != 5:  True\n","\n","18. The Boolean Value of x == 6:  True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"xz25df0pzAt0"},"source":["#Boolean Variables\n","\n","Boolean variables are a great tool that you will often use.  Boolean variables are either True or False.  Boolean variables are perfect for storing any kind of binary type data, like yes and no.  For instance if a database was tracking personal data like marital status it could store \"True\" for married people and \"False\" for unmarried people.  \n","\n","Boolean variables can also be great triggers for turning program functionality on and off.  For instance: imagine there is a game whose code is controlled by a condition that says the variable \"GameOver\" has to be \"False\" in order for the game code to run.  So if a win/lose action should happen \"GameOver\" could be switched to \"True\" to stop the game code running. \n","\n","Play \"Infinite Loop\" below to see an example."]},{"cell_type":"code","metadata":{"id":"roEx0nf3zBUw","colab":{"base_uri":"https://localhost:8080/","height":136},"executionInfo":{"status":"ok","timestamp":1581362799255,"user_tz":300,"elapsed":12398,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAal7SoN20VzbrHnHUoXsjoNTa9aDC6aG5vGpPl=s64","userId":"02111247687678533158"}},"outputId":"9dda44b7-5574-457f-92ef-0e528c29bd65"},"source":["#this game is using the boolean variable as a trigger to end the game\n","gameover = False\n","print(\"Welcome to infinite loop where you can enter the letter 'y' forever!\")\n","while(not(gameover)):\n","  whyletter = input(\"Enter the leter \\\"y\\\" to be trapped in a infite loop, any other ket to get out: \")\n","  if(whyletter != 'y'):\n","    gameover = True\n","\n","print(\"Game Over!\")\n","\n","\n","#here is a simple boolean example\n","y = 5\n","myboolean = False\n","\n","if(myboolean): #notice the shorthand I don't need to say myboolean == True because the variable all by itself is either true or false\n","  print(\"19. This will never print\")\n","\n","if(y <= 5):\n","  myboolean = True\n","\n","if(myboolean):\n","  print(\"20. This is totally going to print\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Welcome to infinite loop where you can enter the letter 'y' forever!\n","Enter the leter \"y\" to be trapped in a infite loop, any other ket to get out: y\n","Enter the leter \"y\" to be trapped in a infite loop, any other ket to get out: y\n","Enter the leter \"y\" to be trapped in a infite loop, any other ket to get out: y\n","Enter the leter \"y\" to be trapped in a infite loop, any other ket to get out: \n","Game Over!\n","20. This is totally going to print\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"PANWKw0uG7v5"},"source":["#Logical Operators\n","Logical Operators allow us to build more complex Boolean expressions.\n","\n","\n","```\n","# Logical Operators\n","and\n","not\n","or\n","```\n","\n","[Truth Table](https://en.wikipedia.org/wiki/Truth_table) details.\n","\n","```\n","# Truth Table\n","    X    |  Operator  |    Y    |   Result\n","    T    |     OR     |    T    |   True\n","    T    |     OR     |    F    |   True\n","    F    |     OR     |    T    |   True\n","    F    |     OR     |    F    |   False #both sides of OR have to be false for the results to be false\n","\n","    T    |     AND    |    T    |   True  #both sides of an AND have to be true for it to be true\n","    T    |     AND    |    F    |   False\n","    F    |     AND    |    T    |   False\n","    F    |     AND    |    F    |   False\n","\n","         |     Not    |    T    |   False\n","         |     Not    |    F    |   True\n","```\n","\n","Logical Operators allow us to make more complex boolean expressions\n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"kpBr8BPFmdij"},"source":["\n","#before hitting run try to guess which print statement will output\n","\n","\n","\n","if([not(not True or not False) or (False or not True)] and not[(True and not False) and (not False and not False)]):\n","  print(\"1. Wow I can't believe I guessed correctly that it was True\")\n","else:\n","  print(\"2. Well maybe that was more complicated then I thought because I really thought it was True\")"],"execution_count":null,"outputs":[]}]}