{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Unit 6 Functions","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOCJOeZ8CDIxUojcxIYiWLQ"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"N7l8w-JZ_BR9"},"source":["[Learning Plan Index](https://docs.google.com/document/d/1B5yWb6wCSRhqD42iWxCi7bmLPY2EqvU6pbiEQT0zs20/edit?usp=sharing)\n","\n","\n","[06P - 01 - Unit 6 Function Python Problems](https://docs.google.com/document/d/1v_EZuApHKm9PwE0aJPn5GA2Cy7K-SH0HxyjD_oUiKNo/edit?usp=sharing)\n","\n","\n","#Functions\n","\n","Functions are predefined chunks of code that can be called whenever we need them.  Functions allow us to make our code [modular](https://en.wikipedia.org/wiki/Modular_programming), which means it is more functional, dynamic, and easier to maintain.  With functions we can remove [redundancy](https://en.wikipedia.org/wiki/Redundant_code) from our programs by creating flexible pieces of code that support a wider range of purposes.\n","\n","Below is a diagram showing the basic structure of a function:\n","\n","![alt text](http://www.gwebblog.com/pics/Function-Basics.PNG)\n","\n","\n","#Parameters/Arguments:\n","As you can see above items listed in the parentheses of the function header are referred to as parameters.  The values inside the parentheses when we invoke the function are referred to as arguments.  Arguments have a value that is passed into the formal parameters so they can be used inside the function.  Arguments and parameters are different variables even if they have the same name.  You may want to avoid using the same name so it is clear that they are different variables.\n","\n","#Calling or Invoking a function:\n","When we need to use a function all we need to do is use the name of the function where we need it in our code, followed by a set of parentheses (), and we must pass the correct number and type of parameters that the function is expecting.  A function does not have to have parameters, but they often do.  When we use a function we say we are \"calling\" or \"invoking\" the function.  Functions always have () after them which is a sign we are dealing with a function.  What is the print() statement?  When we create a function in a program it is called a function.  When we create a function inside of a class it is called a method.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"66XHl_la-4Wo","colab":{"base_uri":"https://localhost:8080/","height":85},"executionInfo":{"status":"ok","timestamp":1581968865846,"user_tz":300,"elapsed":508,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAal7SoN20VzbrHnHUoXsjoNTa9aDC6aG5vGpPl=s64","userId":"02111247687678533158"}},"outputId":"1a248db3-b338-4459-be87-afba7e3a08c6"},"source":["#Below is a simple function with no parameters and no return statement\n","def simpleFunction():\n","  print(\"1. You have successfully called the simpleFunction()\")\n","\n","#this is the call to the function which causes the code to be executed\n","simpleFunction()\n","\n","#*************************************************\n","print()\n","print()\n","#below is a simple function with a single parameter\n","def simpleParameter(inName):\n","  print(\"Welcome to Python\", inName)\n","\n","simpleParameter(\"Gordon\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. You have successfully called the simpleFunction()\n","\n","\n","Welcome to Python Gordon\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"GxNkVf_tzCPC"},"source":["#Positional vs Keyword Arguments:\n","You can either pass arguments to parameters by their position or by keyword arguments.  You can also do a slight mix of positional and keyword passing. \n","\n","#This is Pass by Position:\n","If I have a function with this heading:  def f(x, y, z)\n","I can call the function and pass values by position f(1,2,3)\n","This will result in x=1, y=2, z=3.\n","The first argument went into the first parameter variable, the second argument went to the second parameter variable and the third went to the third.  Pass by position.\n","\n","#Pass by Keyword:\n","If I have a function with this heading:  def f(x, y, z)\n","I can call the function and pass values by keyword like this: f(x=1,y=2,z=3)\n","I can pass them regardless of order: f(z=3,x=1,y=2)\n","I can do a mix of position and keyword like this: f(1,y=2,z=3)\n","While you can do a positional pass and then follow it with keyword passes, **you cannot do a positional pass after you have done a keyword pass**.  So this will error: f(x=1, 2, 3), but this will not f(1,2,z=3)\n","Check out these examples\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"MuzIqxtVzuJb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618599326849,"user_tz":240,"elapsed":277,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"2cada8ff-d748-4489-a9a5-61260dc86dc2"},"source":["def myFunction(x,y,z):\n","  print(\"x:\",x)\n","  print(\"y:\",y)\n","  print(\"z:\",z)\n","\n","print(\"1. Simple pass by position:\")\n","myFunction(1,2,3)\n","\n","print()\n","print(\"2. Pass by Keyword\")\n","myFunction(x=1,y=2,z=3)\n","\n","#with pass by keyword parameters can be in any order\n","print()\n","print(\"3. Pass by Keyword mixed order\")\n","myFunction(z=2,y=3,x=1)\n","\n","#I can pass by position and then pass by keyword.\n","print()\n","print(\"4. Pass by Position and then Keyword\")\n","myFunction(1,y=2,z=3)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["1. Simple pass by position:\n","x: 1\n","y: 2\n","z: 3\n","\n","2. Pass by Keyword\n","x: 1\n","y: 2\n","z: 3\n","\n","3. Pass by Keyword mixed order\n","x: 1\n","y: 3\n","z: 2\n","\n","4. Pass by Position and then Keyword\n","x: 1\n","y: 2\n","z: 3\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1oM2BiLHz5Xp"},"source":["#the call below will error.  Once I have done a pass by keyword each parameter afer that has to be a pass by keyword. So the number 3 will cause an error because I have keyword passes before that.\n","\n","myFunction(x=1,y=2,3)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Qt-T1c691gya"},"source":["#Passing by Value vs. Passing by Reference:\n","Pass by value passes a copy of the argument so changes made to the parameter in the function do not affect the original variable value.  Pass by reference passes the address of the object to the function so that any changes made to the parameter in the function do affect the original object.  Check out this [webpage](https://pediaa.com/what-is-the-difference-between-pass-by-value-and-pass-by-reference/) for more, look at code below for examples.\n","\n","Technically Python does everything pass by reference, because all variables in Python are objects.  However, some objects are [immutable](https://en.wikipedia.org/wiki/Immutable_object), which means they cannot be changed.  If they are changed a whole new object is created, so immutable objects like Strings and numbers will behave like a pass by value.  So any changes made within the function will not affect the original variable.\n","There is an example in the code below where the value of x is changed resulting in a new id, which is evidence that changing a simple variable creates a new instance of an object for that variable.\n","\n","![alt text](http://www.gwebblog.com/pics/Pass-by-Value-and-Pass-by-Reference.jpg)"]},{"cell_type":"code","metadata":{"id":"H3xk9JXK2KTD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618599694093,"user_tz":240,"elapsed":323,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"b519b1e0-f26f-4b81-c8f0-359c95ab7045"},"source":["print()\n","print(\"*****passing simple variables****\")\n","x = 5\n","print(\"1.\", x, \"value of x before function call\")\n","\n","#function that makes small change to parameter and outputs changed value\n","#the x inside this function is different then the x outside the function\n","#the x in the function only exists within the function it has a local scope\n","#the x outside the function has a global scope\n","def changeX(x):\n","  x *= 5\n","  print(\"2.\",x, \"Value of x at end of function\")\n","\n","#call function and pass in x value\n","changeX(x)\n","\n","print(\"3.\", x, \"value of x after function call\")\n","\n","\n","print(\"4. Immutable objects like numbers and stings cannot be changed, so when they are a new version is created.\")\n","print(\"5. This has the effect of those objects being treated as a pass by value.\")\n","print()\n","\n","print(\"***** Changing the value of a simple variable shows that a new object is created for that variable ****\")\n","x = 5\n","print(\"6.\", id(x))\n","x += 1\n","print(\"7.\", id(x))\n","\n","print()\n","print(\"*****passing objects ****\")\n","\n","mylist = list(range(1,10,2))\n","print(\"8.\", mylist,\"List before being passed to Function\")\n","\n","#simple function that adds number to list\n","def ListChange(lst):\n","  lst.append(777)\n","  print(\"9.\", lst, \"lst at end of Function\")\n","\n","#call function and pass value into it\n","ListChange(mylist)\n","\n","#print contents of list after function call.  You can see original list is changed from function call\n","print(\"10.\", mylist, \"List after being passed to Function\")\n","print(\"11. passing an object into a function can result in original object being altered.\")\n"],"execution_count":3,"outputs":[{"output_type":"stream","text":["\n","*****passing simple variables****\n","1. 5 value of x before function call\n","2. 25 Value of x at end of function\n","3. 5 value of x after function call\n","4. Immutable objects like numbers and stings cannot be changed, so when they are a new version is created.\n","5. This has the effect of those objects being treated as a pass by value.\n","\n","***** Changing the value of a simple variable shows that a new object is created for that variable ****\n","6. 94608718625408\n","7. 94608718625440\n","\n","*****passing objects ****\n","8. [1, 3, 5, 7, 9] List before being passed to Function\n","9. [1, 3, 5, 7, 9, 777] lst at end of Function\n","10. [1, 3, 5, 7, 9, 777] List after being passed to Function\n","11. passing an object into a function can result in original object being altered.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"N3oZBN7h4jLJ"},"source":["#Functions Returning Values\n","Functions can have a return statement so they return some value.  However, they do not have to have a return statement, they can just perform some action.  A function that does not return anything or has a return of nothing is known as a 'void', or 'none' function.  If you try to print a void function you will get an output of \"none\".\n","\n","If a function has a return value that means you need to use \n","\n","#Functions and Global Variables\n","To access a program variable inside of a function I have to use the keyword 'global', otherwise the variable inside my function is considered a local variable that only exists within my function."]},{"cell_type":"code","metadata":{"id":"JiCUg6iz5oiq","colab":{"base_uri":"https://localhost:8080/","height":255},"outputId":"3972f838-36dc-407f-9922-50984cf7018c"},"source":["#A simple function that returns the sum of two numbers\n","\n","def mysum(x,y):\n","  return x + y\n","\n","#code below will call mysum with two arguments passed into the function parameters, which will return the sum of the two numbers\n","print(\"1. The return from mysum(2,2) will be the sum of the two numbers:\", mysum(2,2))\n","\n","#this is an example of a void/none function, it does not return anything so if printed you get \"None\" as output \n","def doNothing():\n","  print(\"2. I serve no purpose really.\")\n","\n","print(\"3.\", doNothing())\n","\n","#in the previous code block there is a simple function called changeX\n","#I will recreate that function here but call it changeY\n","#in the code above I used x as the name of the variable both inside and outside of the function\n","#Those two x's were not the same, they were two different x's\n","#here I will have two different variable names\n","\n","z = 5\n","#y does not exist here\n","def changeY(y):\n","  #z does not exist here, but can be accessed\n","  y *= 5\n","  print(\"4.\", y, \"Value of local x at end of function\")\n","\n","#y does not exist here and will cause an error accessed\n","print(\"5. the value of z is unchanged:\", z)\n","\n","#function call below will pass a copy of what z holds into y in the function so the function can use it\n","#notice that my output print numbering is off for 4,5 because of the order I called the function\n","changeY(z)\n","\n","\n","#the code below uses the keyword global so that I can access the variable that exists outside of the function\n","\n","print(\"6. the value of z before the function:\", z)\n","def changeZ():\n","  global z\n","  z *= 5\n","  print(\"7.\", z, \"Value of z at end of function\")\n","\n","#this call to changeZ will change the value of z because it was accessed globally\n","#in this example z is the same variable both in and out of the function\n","changeZ()\n","\n","print(\"8. the value of z after the function:\", z)\n","\n","print()\n","print()\n","#below I have a couple examples of functions that return None or -1 to show that some sort of error was caught by the function\n","#first the two possible outputs will be output for the first version of the function mysummer()\n","\n","def mysumer(q,w):\n","  if(isinstance(q, int) or isinstance(q, float) or isinstance(w, int) or isinstance(w, float)):\n","    return q + w \n","  else:\n","    return \n","\n","print(\"9. The return from mysumer(2,2) will be the sum of the two numbers:\", mysumer(2,2))\n","print(\"10. The return from mysumer('p','q') will be a blank return statement which is:\", mysumer('p','q'))\n","\n","print()\n","print()\n","#now a second version of the function is created that returns a -1 to show a problem\n","#both functions are tested at the bottom of the page to change the output given\n","\n","def mysumer2(q,w):\n","  if(isinstance(q, int) or isinstance(q, float) or isinstance(w, int) or isinstance(w, float)):\n","    return q + w \n","  else:\n","    return -1\n","\n","\n","e,r = input(\"Please enter two numbers separated by a space: \").split()\n","\n","#We will use a try except statement to make sure we can covert input into numbers\n","#to make sure we don't throw an error\n","try:\n","   e = int(e)\n","   r = int(r)\n","except ValueError:\n","  print(\"you did not input a number?\")\n"," \n","\n","\n","if(mysumer(e,r) == None):\n","  print(\"11. I can test to see if a function is a None function\")\n","else:\n","  print(\"12. The output of mysumer(\", e, r, \") is:\", mysumer(e,r))\n","\n","if(mysumer2(e,r) == -1):\n","  print(\"12. some other languages will use something like -1 or another value that could not be a result of the function\")\n","  print(\"13. to show that something unexpected happened that doesn't allow the function to work properly\")\n","else:\n","  print(mysumer2(e,r))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. The return from mysum(2,2) will be the sum of the two numbers: 4\n","2. I serve no purpose really.\n","3. None\n","5. the value of z is unchanged: 5\n","4. 25 Value of local x at end of function\n","6. the value of z before the function: 5\n","7. 25 Value of z at end of function\n","8. the value of z after the function: 25\n","\n","\n","9. The return from mysumer(2,2) will be the sum of the two numbers: 4\n","10. The return from mysumer('p','q') will be a blank return statement which is: None\n","\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6dM2uqhkX1nt"},"source":["#scope\n","If a variable is created outside of a function the global keyword needs to be used to access that variable.  \n","\n","If a variable is created inside of a function it only exists and can only be accessed within that function."]},{"cell_type":"code","metadata":{"id":"4euLFRSIYWgL","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1582920160345,"user_tz":300,"elapsed":724,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAal7SoN20VzbrHnHUoXsjoNTa9aDC6aG5vGpPl=s64","userId":"02111247687678533158"}},"outputId":"e0849ee1-ec41-44b8-cb28-e4fb0ec72a53"},"source":["a = 5\n","print(\"1. global a is set to:\", a)\n","\n","def localVar():\n","  a = 10\n","  print(\"2. localVar 'a' has a local scope that only exists in the function:\", a)\n","\n","localVar()\n","\n","#local a is not called here because it only exists within the localVar function\n","print(\"2. global a is still set to:\", a)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. global a is set to: 5\n","2. localVar 'a' has a local scope that only exists in the function: 10\n","2. global a is still set to: 5\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"B6xiLoxjaJEH"},"source":["#this code block will throw an error because of an attempt to access a local variable outside of its scope\n","def anotherLocalVar():\n","  z = 5\n","  print(\"1. z has a value of\", z)\n","\n","#this will throw an error because z is a local variable that does not exist outside of the function\n","print(z)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nS-8Nojda14g","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1582920974096,"user_tz":300,"elapsed":545,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAal7SoN20VzbrHnHUoXsjoNTa9aDC6aG5vGpPl=s64","userId":"02111247687678533158"}},"outputId":"eb4e2888-df7e-463a-e8fa-f4943f15e30b"},"source":["m = 1\n","n = 2\n","o = 3\n","print(\"1. value of m:\", m, \"value of n:\", n, \"value of o:\", o)\n","\n","def useGlobal():\n","  global m,n,o\n","  m += 2\n","  print(\"2. value of m:\", m, \"value of n:\", n, \"value of o:\", o)\n","\n","useGlobal()\n","\n","print(\"3. value of m:\", m, \"value of n:\", n, \"value of o:\", o)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. value of m: 1 value of n: 2 value of o: 3\n","2. value of m: 3 value of n: 2 value of o: 3\n","3. value of m: 3 value of n: 2 value of o: 3\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"FC0t7fhNdaO1"},"source":["#Global Variables\n","Notice in the code block above that when a global variable is changed inside the function the value is changed globally."]},{"cell_type":"markdown","metadata":{"id":"viV1NgjZipV7"},"source":["#Default Arguments\n","You can have your function variables set to default values so that you can pass in a value or just leave it set to the default value.\n","\n","To do this you need to declare what value the variables will have when you define the function.\n","\n","\n","```\n","# Defining default values\n","def myFunc(x=2,y=7):\n","```\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"CHT87fexl5PE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618585664424,"user_tz":240,"elapsed":327,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"55e89580-b435-4171-8b58-22cf0aa4be17"},"source":["def defaultValues(g=2, h=2):\n","  return g * h\n","\n","print(\"1. with default values:\", defaultValues())\n","\n","print(\"2. with new values passed in:\", defaultValues(5,5))\n","\n","#it is possible to do a mix of default values and passed values\n","#if I do a mix I need to specify which variable I am passing a value to\n","print(\"3. this is a mix of default and passed\", defaultValues(g=5))\n","\n","print(\"3. this is a mix of default and passed\", defaultValues(1,h=3))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. with default values: 4\n","2. with new values passed in: 25\n","3. this is a mix of default and passed 10\n","3. this is a mix of default and passed 3\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"vE4pSrYOpzYs"},"source":["#Stubs\n","When developing a program that will be using a lot of functions, or methods, sometimes in can help to create a stub of your function that does the bare minimum required, so that the function exists and does something so that the rest of the program can be developed."]},{"cell_type":"code","metadata":{"id":"rpOR3HRB3ygX","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1582929201335,"user_tz":300,"elapsed":4670,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAal7SoN20VzbrHnHUoXsjoNTa9aDC6aG5vGpPl=s64","userId":"02111247687678533158"}},"outputId":"4a032766-56f3-48ec-ac14-f97db780f10a"},"source":["#this is a program that is not fully developed\n","#the functions are just stubs at this point of development just so the rest of the program can be developed\n","\n","#this function will return true for an odd number\n","def isDivisibleBy5(numin):\n","  return True\n","\n","#this function will return true for an even number\n","def isDivisibleBy6(numin):\n","  return True\n","\n","\n","myvar = eval(input(\"Enter a number to see if it is divsible by 5 and/or 6\"))\n","\n","print(\"Your number is divisible by 5:\", isDivisibleBy5(myvar), \" | Your number is divisible by 6:\", isDivisibleBy6(myvar), \" | Your number is divisible by 5 and 6:\", isDivisibleBy5(myvar) and isDivisibleBy6(myvar))\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Enter a number to see if it is divsible by 5 and/or 676\n","Your number is divisible by 5: True  | Your number is divisible by 6: True  | Your number is divisible by 5 and 6: True\n"],"name":"stdout"}]}]}