{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Unit 4 Random Numbers","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNeSnRkjF7K2axcXnXGslsr"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"dFfA6ce0pxZn"},"source":["[Learning Plan Index](https://docs.google.com/document/d/1B5yWb6wCSRhqD42iWxCi7bmLPY2EqvU6pbiEQT0zs20/edit?usp=sharing)\n","\n","\n","[04P - 01 - Unit 4 Selection Python Problems](https://docs.google.com/document/d/1b_3Wnc3aRuoKD4FpgPn7Kgo2Rrx3eaD_rUbugq2HrIQ/edit?usp=sharing)\n","\n","#Random Numbers\n","\n","Random numbers are something that is used in programming frequently.  If you are playing a video game and defeat and opponent the treasure you find on that opponent may be generated randomly, or if your character dies they may respawn in a random location.\n","\n","To use random numbers you must import the random class with the statement:\n","```\n","# random must be imported to use the random class\n","import random\n","```\n","\n","#random.randint(num1,num2)  (inclusive, inclusive)\n","Once you've imported random you can use the randint() method.  You will pass in two number parameters that will be used inclusively (which means that both numbers could be one of your random results).  To use a method we need to state what class it comes from so the syntax is classname.methodname(), in this case it would be random.randint(num1,num2).  If I did random.randint(1,2) I would either get a 1 or a 2 every time the method was called.  Doing a call like this would be a good way for me to randomly choose between two things, like an addition problem vs. a subtraction problem.\n"]},{"cell_type":"code","metadata":{"id":"E5rI7_WppkM5"},"source":["import random\n","\n","#This code will return either a 1 or a 2 whenever it is called\n","print(\"1. \" + str(random.randint(1,2)))\n","\n","print()\n","#Here is a loop calling the method randint(1,2) 10 times.  I will either get a 1 or 2 everytime the method is called. I am also outputting the value x as a counter for each output\n","print(\"2. Begin loop output for 10 random numbers between 1-2\")\n","\n","for x in range(10):\n","  print(x, random.randint(1,2))\n","\n","print(\"3. End loop output\")\n","print()\n","#This loop will give me 10 random numbers between 1-100\n","print(\"4. Begin loop output for 10 random numbers between 1-100\")\n","\n","\n","for x in range(10):\n","  print(x, random.randint(1,100))\n","\n","print(\"5. End loop output\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JIhlcYxOYvg5"},"source":["#random.randrange(num1,num2)  (inclusive, exclusive)\n","\n","Again I need to import random in order to use the method of the random class.  Although for colab notebooks since I don't have to import again since I already imported in the code block above, random is imported for all the other code blocks in this document.\n","\n","randrange() works just like randint() except that the second number is exclusive (meaning we stop before that number so the second number will never be one of your results).  Inclusive means includes, exclusive means excludes.\n","\n","So random.randrange(1,2) will only return 1.  randint() is a little more intuitive than randrange() because of inclusive vs. exclusive.\n","\n","The results of randrange() and randint() will be an integer."]},{"cell_type":"code","metadata":{"id":"opfde31IY4U1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1615579887928,"user_tz":300,"elapsed":372,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"3dc9ca4e-e5f1-4ca5-ffbc-a1259c82b5fe"},"source":["import random\n","\n","#This code will always return a 1\n","print(\"1. \" + str(random.randrange(1,2)))\n","\n","print()\n","#Here is a loop calling the randrange(1,2) method 10 times.  This will always give a 1. I am also outputting the value x as a counter for each output\n","print(\"2. Begin loop output for 10 random numbers between 1-1\")\n","\n","for x in range(10):\n","  print(x, random.randrange(1,2))\n","\n","print(\"3. End loop output\")\n","print()\n","#This loop will give me 10 random numbers between 1-99\n","print(\"4. Begin loop output for 10 random numbers between 1-99\")\n","\n","\n","for x in range(10):\n","  print(x, random.randrange(1,100))\n","\n","print(\"5. End loop output\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. 1\n","\n","2. Begin loop output for 10 random numbers between 1-1\n","0 1\n","1 1\n","2 1\n","3 1\n","4 1\n","5 1\n","6 1\n","7 1\n","8 1\n","9 1\n","3. End loop output\n","\n","4. Begin loop output for 10 random numbers between 1-99\n","0 25\n","1 86\n","2 80\n","3 55\n","4 31\n","5 57\n","6 37\n","7 98\n","8 78\n","9 45\n","5. End loop output\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"UBHZrjrla2uo"},"source":["#random.random()    0.0 >= num < 1.0\n","\n","This method also requires that the random class is imported, but since it has already been imported twice in this Colab Notebook I am not going to import it to show that once something is imported in a Colab Notebook it is available for the rest of the document.  This is true for any code I create.  If I set a value of x in the top code block than it is available in all the rest of the code blocks.\n","\n","This method takes no parameters so it will always return a float that is >= 0 and < 1.  This method would be appropriate if I need a floating point number.  If I need a float number that has a larger range or a specific range than I need to add some math to generate numbers in that range.  I could do a similiar thing with the other methods above, but since they automatically can be set to a range there would be no point.\n","\n","\n","\n","```\n","# Seeding the random() method to get a larger range\n","large   =  Integer that is the largest Integer.float you want\n","small   =  Smallest Integer.float you want\n","\n","#below will return a float number from small to large\n","x = random.random() * large + small\n","```\n","\n"]},{"cell_type":"code","metadata":{"id":"BrphAOfXb9wL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1615580136533,"user_tz":300,"elapsed":271,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"ed22d15e-dcf7-4531-8a79-8ddeb32093f6"},"source":["#This code will always return either a 1\n","print(\"1. \" + str(random.random()))\n","\n","print()\n","#Here is a loop calling the random() method 10 times.  This will return a number that is >= 0 and <1 . I am also outputting the value x as a counter for each output\n","print(\"2. Begin loop output for 10 random numbers between 0 - .999999....\")\n","\n","for x in range(10):\n","  print(x, random.random())\n","\n","print(\"3. End loop output\")\n","print()\n","\n","#This loop will give me 100 random numbers between 1.something and 100.something\n","print(\"4. Begin loop output for 100 random numbers between 1.0-99.99...\")\n","\n","large = 100\n","small = 1\n","#random.random() * large + small will return a float number between small - large\n","for x in range(100):\n","  print(x, random.random() * large + small)\n","\n","print(\"5. End loop output\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. 0.46733199286892746\n","\n","2. Begin loop output for 10 random numbers between 0 - .999999....\n","0 0.896785874083411\n","1 0.7271485156870907\n","2 0.05520265130310431\n","3 0.3846290174764737\n","4 0.4888137371081659\n","5 0.24492053597412067\n","6 0.8211699028310454\n","7 0.8017503361203757\n","8 0.2820243648132025\n","9 0.48915692934172517\n","3. End loop output\n","\n","4. Begin loop output for 100 random numbers between 1.0-99.99...\n","0 85.10902623463889\n","1 67.84457110420175\n","2 86.30827180722265\n","3 23.457990439689148\n","4 5.306017040053922\n","5 3.8589169463044573\n","6 89.95821513277534\n","7 62.23286524517207\n","8 32.15971137712656\n","9 45.32676833207506\n","10 76.50132427443914\n","11 96.59908450236908\n","12 10.223033161999549\n","13 13.230919730643707\n","14 86.84137579839184\n","15 80.6277845907816\n","16 9.431922234346356\n","17 40.03131866301932\n","18 76.82145595229302\n","19 8.16614545258688\n","20 35.17861185000053\n","21 88.23508571899012\n","22 23.04382259048335\n","23 59.484243988726405\n","24 47.02206035152137\n","25 3.3066790270193316\n","26 50.708169743521914\n","27 67.96349768205359\n","28 41.281804531717405\n","29 22.451853224859928\n","30 90.70702778138869\n","31 51.9393660323582\n","32 7.497037838438279\n","33 52.59731448808256\n","34 3.4266417219103387\n","35 25.364529662954148\n","36 51.25178542645248\n","37 49.88243288712911\n","38 64.17125241936242\n","39 14.514080594414857\n","40 12.281050595797948\n","41 22.505408634180135\n","42 81.88079444920241\n","43 80.98129273619037\n","44 33.89817432597073\n","45 44.872668914828125\n","46 94.5272669613709\n","47 9.083896955638735\n","48 60.44698518852568\n","49 73.90888414288924\n","50 83.91287304466499\n","51 17.623663731657643\n","52 96.33261399831588\n","53 17.62285952789698\n","54 49.52065541346972\n","55 35.98198544952994\n","56 7.61011199167204\n","57 97.4843429954151\n","58 29.30619277048858\n","59 61.23696566751274\n","60 53.79307876103232\n","61 29.124159782016722\n","62 33.513695012572796\n","63 82.2511479477993\n","64 99.93159987466402\n","65 97.33228987061314\n","66 26.62418060168946\n","67 44.26940292944027\n","68 89.89208523474073\n","69 67.62458042404664\n","70 63.18877728540703\n","71 86.01375031139173\n","72 42.23404767802504\n","73 18.918041815661446\n","74 54.63379798919442\n","75 69.54475291808363\n","76 21.551651642652015\n","77 75.92862601319098\n","78 60.9350962802243\n","79 61.79317694988947\n","80 70.68594332036339\n","81 82.72629589987802\n","82 89.77613926687874\n","83 59.72914221524116\n","84 78.12908303704168\n","85 30.94668225387921\n","86 26.28268454818795\n","87 36.63340366241826\n","88 88.97191359480794\n","89 62.1639015956302\n","90 95.87300899241438\n","91 11.818984462099458\n","92 52.284124436142754\n","93 62.37803233496737\n","94 76.73177288439913\n","95 11.803684833750394\n","96 53.82139225748501\n","97 99.71424471667102\n","98 30.224216728600116\n","99 11.836514082450199\n","5. End loop output\n"],"name":"stdout"}]}]}