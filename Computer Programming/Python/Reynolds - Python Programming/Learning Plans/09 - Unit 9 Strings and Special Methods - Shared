{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Unit 9 Strings and Special Methods","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNipQzspTnhc3rGS8MvLFO0"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"9XAl91aFdpFc"},"source":["[Main Index](https://docs.google.com/document/d/1B5yWb6wCSRhqD42iWxCi7bmLPY2EqvU6pbiEQT0zs20/edit?usp=sharing)\n","\n","#Strings are Objects of the String Class\n","Strings are text and text is a major component of computer programming.  Strings are objects of the String class, but they have some slight differences from normal classes.  Strings are also immutable(cannot be changed) objects, so anytime we change a string a new object is created for that changed string.  This means we do not have to worry about pass by reference for strings becuase if a string is changed in a method or function a new object will be created for use in that method or function and the original string will stay unchanged.\n","\n","\n","Technically the proper way to create a String is:\n","```\n","# Creating String Objects\n","s1 = str() #creates an empty string object\n","s1 = \"\"    #this does the same thing as above\n","\n","s1 = str(\"welcome\")  #creates a string object variable with the word \"welcome\" stored in it\n","s1 = \"welcome\"       #this does the same things as above\n","```\n","\n","#Strings and Arrays\n","Strings are very much like arrays and arrays are data structures that hold multiple values.  If you look at the image below where s = \"Programming\" you can see that we can treat s like an array where s[0] will give us the letter \"P\".\n","\n","![alt text](http://www.gwebblog.com/pics/String-Array.png)\n","\n","\n","#Strings and Functions\n","Strings have a whole set of [methods](https://www.w3schools.com/python/python_ref_string.asp) that belong to the str (String) class, which you can use in your programs.  \n","\n","Below are some samples of how some features and functions of python can be used to manipulate and work with strings."]},{"cell_type":"code","metadata":{"id":"Ytn07gb_YWuD","colab":{"base_uri":"https://localhost:8080/","height":612},"executionInfo":{"status":"ok","timestamp":1585590960101,"user_tz":240,"elapsed":435,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"8d80787f-9d55-4552-b07d-0b8243be7dc4"},"source":["myString = \"Portsmouth High School\"\n","myString2 = \"Clippers\"\n","myString3 = \"clippers\"\n","myString4 = \"1234\"\n","\n","print(\"1.\", len(myString))  #will return the length of the string including spaces\n","\n","print(\"2.\", min(myString2))  #the letter \"C\" has the lowest ascii code so that is what min returns\n","\n","print(\"3.\", max(myString2))   #the letter \"s\" has the highest ascii value so that is what is returned\n","\n","#we can treat a string like an array and access individual elements by their index \n","#or we can slice out elements of the string and we can then concatenate them together (Combineing strings with a + is concatenation)\n","phrase = myString2[0:7] + myString[10] + myString[17] + myString[19: len(myString)] + myString[10]\n","\n","print(\"4.\", phrase)\n","print()\n","\n","#you can multiply strings so you get multiple copies\n","print(\"5.\", phrase * 5)\n","\n","#we can use the \"in\" operator to receive a boolean value if one string is contained in another\n","print(\"6.\", \"cool\" in phrase)\n","print(\"7.\", \"cool\" not in phrase)\n","print()\n","\n","#we can compare strings with numeric operators ==, !=, >, <, >=, <=\n","#Strings will be compared letter by letter by their ascii value and will return a results as soon as it can\n","#for == it will go through the entire strings to make sure they are the same\n","#for inequalities it will return a result as soon as it finds two letters that are not the same\n","#code below prints myString2 because P = 50 and C = 43 in the ascii table so the \"C\" in \"Clippers\" is less than \"P\" in \"Portsmouth\"\n","if myString < myString2:\n","  print(\"8.\", myString)\n","else:\n","  print(\"9.\", myString2)\n","\n","if(myString2 == myString3):\n","  print(\"10. This will not print because of the capital 'C' in Clippers of myString\")\n","\n","if(myString2 == myString3.capitalize()):\n","  print()\n","  print(\"11. This will print because I used the capitalize() method to capitalize the first letter of 'clippers' in myString2\")\n","  print(\"12. I could also remove case from the comparision by converting both strings to lower or uppercase when comparing.\\n\")\n","\n","\n","#we can iterate across a string\n","print(\"13. \", end=\"\")\n","for x in myString:\n","  print(x, end =\"\")\n","print()\n","\n","\n","#by treating the string as an array I can print it backwards\n","print(\"14. \", end=\"\")\n","for x in range(len(myString)-1,-1,-1):\n","  print(myString[x], end =\"\")\n","\n","print(\"\\n\\n\")\n","#here are some examples of some of the methods of the str class\n","\n","#isalnum() is boolean return true if everything in the string is a number or letter and there is at least 1 letter\n","#myString is false because it has spaces in it, myString2 is true because it is just letters\n","print(\"15. isalnum()\", myString, \"-\", myString.isalnum())\n","print(\"16. isalnum()\", myString2, \"-\", myString2.isalnum())\n","\n","#isalpha() is boolean return true if everything in the string is a letter and there is at least 1 letter\n","#myString is false because it has spaces in it, myString2 is true because it is just letters\n","print(\"17. isalpha()\", myString, \"-\", myString.isalpha())\n","print(\"18. isalpha()\", myString2, \"-\", myString2.isalpha())\n","\n","#isdigit() is boolean return true if everything in the string is a number character\n","#myString2 is false because it is just letters, but myString4 is number characters so it is true\n","print(\"17. isdigit()\", myString2, \"-\", myString2.isdigit())\n","print(\"18. isdigit()\", myString4, \"-\", myString4.isdigit())\n","\n","#isdigit() is boolean return true if everything in the string is a number character\n","#myString2 is false because it is just letters, but myString4 is number characters so it is true\n","print(\"17. isdigit()\", myString2, \"-\", myString2.isdigit())\n","print(\"18. isdigit()\", myString4, \"-\", myString4.isdigit())\n","\n","print()\n","#isidentifier() function returns True if the string is a valid identifier, otherwise False. \n","#The string is considered a valid identifier if it only contains the alphanumeric letters (a-z) and (0-9), or underscores (_). \n","#The valid identifier cannot start with a number, or contain any spaces.\n","print(\"19. myString -\", myString, \"-\", myString.isidentifier())    #returns false because string has spaces in it\n","print(\"20. myString2 -\", myString2, \"-\", myString2.isidentifier()) #returns true because it meets requirements of isidentifier()\n","print(\"21. myString3 -\", myString3, \"-\", myString3.isidentifier())  #returns true because it meets requirements of isidentifier()\n","print(\"22. myString4 -\", myString4, \"-\", myString4.isidentifier()) #returns false because it starts with a number\n","print()\n","\n","#islower() is boolean return true if everything in the string is a lower case character\n","#isupper() is boolean return true if everything in the string is a upper case character\n","\n","print(\"23. islower()\", myString2, \"-\", myString2.islower())\n","print(\"24. isupper()\", myString3, \"-\", myString3.isupper())\n","\n","#isspace() is boolean return true if everything in the string is white space\n","#making myString only whitespace so I get true from isspace()\n","myString = \"   \"\n","print(\"25. isspace()\", myString, \"-\", myString.isspace())\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. 22\n","2. C\n","3. s\n","4. Clipper cool \n","\n","5. Clipper cool Clipper cool Clipper cool Clipper cool Clipper cool \n","6. True\n","7. False\n","\n","9. Clippers\n","\n","11. This will print because I used the capitalize() method to capitalize the first letter of 'clippers' in myString2\n","12. I could also remove case from the comparision by converting both strings to lower or uppercase when comparing.\n","\n","13. Portsmouth High School\n","14. loohcS hgiH htuomstroP\n","\n","\n","15. isalnum() Portsmouth High School - False\n","16. isalnum() Clippers - True\n","17. isalpha() Portsmouth High School - False\n","18. isalpha() Clippers - True\n","17. isdigit() Clippers - False\n","18. isdigit() 1234 - True\n","17. isdigit() Clippers - False\n","18. isdigit() 1234 - True\n","\n","19. myString - Portsmouth High School - False\n","20. myString2 - Clippers - True\n","21. myString3 - clippers - True\n","22. myString4 - 1234 - False\n","\n","23. islower() Clippers - False\n","24. isupper() clippers - False\n","25. isspace()     - True\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JiWYOZAy7YRq"},"source":["#Substrings, Converting & Manipulating Strings\n","\n","A substring is a string within a string, for instance \"sub\" is a substring of \"substring\".  We often want to search strings for substrings within the string.  Speach or text recognition software really needs to pull every word, or keywords, out of a sentence to analyze the meaning of the sentence.  Those words in a sentence are substrings of the sentence. There are a number of methods of the str class for analyzing substrings. Below are some examples of a few of the methods available for finding substrings and converting strings.\n","\n","```\n","# Substring Methods\n","s1 = \"A substring in a string is a string\"\n","s1.endswith(\"string\")   #will return true if string ends with \"string\"\n","s1.startswith(\"a\")      #will return true if string begins with \"a\" \n","s1.find(\"string\")       #will return lowest index of first occurrence of where word starts or -1 if nothing found\n","s1.rfind(\"string\")      #will do the same as find() but search from the end of the string finding the last occurence\n","s1.count(\"a\")           #will return an int representing how many times it found substring \"a\" in the string\n","s1.upper()              #will return a uppercase version of the string. This does not change the original string\n","s1 = s1.upper()         #this will change s1 into all uppercase\n","s1.lower()              #this will return a lowercase version of the string\n","s1.capitalize()         #will return a version of the string with the first letter of the string capitalized\n","s1.title()              #will return a version of the string where the first letter of every word is capitalized\n","s1.swapcase()           #will return a version of the string where all cases are reversed\n","\n","```\n","#String Slicing\n","\n","Since strings are like arrays or lists, there are ways you can manipulate them that is similiar to what you can do with a list.  Check out this [reference at GeeksforGeeks](https://www.geeksforgeeks.org/string-slicing-in-python/).  \n","\n","You can also check out this [reference at GeeksforGeeks](https://www.geeksforgeeks.org/python-add-substring-at-specific-index/) that shows how to convert a string to a list, so that you can easily add to it and manipulate it, and then turn it back to a string again when you are done.\n","\n"]},{"cell_type":"code","metadata":{"id":"AwWXgBZYqnw6","colab":{"base_uri":"https://localhost:8080/","height":255},"executionInfo":{"status":"ok","timestamp":1585931007545,"user_tz":240,"elapsed":497,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"ba82b65f-f8b3-4824-c725-f8d334030551"},"source":["s1 = \"A substring in a string is a string\"\n","print(\"1.\", s1.endswith(\"string\"))      #returns true because s1 ends with 'string'\n","\n","print(\"2.\", s1.startswith(\"a\"))         #returns false because of case sensitivity 'A' not the same as 'a'\n","\n","print(\"3.\", s1.lower().startswith(\"a\")) #returns true because it makes s1 all lowercase before checking for 'a'\n","\n","print(\"4.\", s1.find(\"a\"))               #returns 15 which is the index of the first 'a' if you start at 0 when counting characters in the string.  spaces count\n","\n","print(\"5.\", s1.rfind(\"a\"))              #rfind starts from the right end of the string and finds the second 'a' at index 27\n","\n","print(\"6.\", s1.count(\"a\"))              #returns a 2 because there are 2 'a' in the s1\n","\n","print(\"7.\", s1.upper())                 #returns an uppercase version of the string.  s1 itself is not changed\n","print(\"8.\", s1.lower())                 #returns an lowercase version of the string.  s1 itself is not changed\n","\n","s1 = s1.upper()                         #this changes s1 so now when printed it will be all uppercase\n","print(\"9.\", s1)                         #s1 is now uppercase because the previous line actually changed the state of s1\n","\n","s1 = s1.lower()                         #this will convert s1 back to all lowercase\n","s1 = s1.capitalize()                    #this will recapitalize the first letter of the string so it is back to its original state\n","print(\"10.\", s1)                        #s1 is now back to its original state\n","print(\"11.\", s1.title())                #this returns a version of s1 where the first letter of each word is capitalized\n","print(\"12.\", s1.swapcase())                 #returns a version of the string where all cases are swapped\n","\n","test_string = \"Geeksforgeeks is best, Computer Science Portal\"\n","  \n","# printing original string \n","print (\"The original string is : \" +  test_string) \n","  \n","# using split() \n","# to extract words from string \n","res = test_string.split() \n","  \n","# printing result \n","print (\"The list of words is : \" +  str(res)) \n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. True\n","2. False\n","3. True\n","4. 15\n","5. 27\n","6. 2\n","7. A SUBSTRING IN A STRING IS A STRING\n","8. a substring in a string is a string\n","9. A SUBSTRING IN A STRING IS A STRING\n","10. A substring in a string is a string\n","11. A Substring In A String Is A String\n","12. a SUBSTRING IN A STRING IS A STRING\n","The original string is : Geeksforgeeks is best, Computer Science Portal\n","The list of words is : ['Geeksforgeeks', 'is', 'best,', 'Computer', 'Science', 'Portal']\n"],"name":"stdout"}]}]}