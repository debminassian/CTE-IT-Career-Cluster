{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"03 - Unit 3 Strings, Escape Sequences, print end, Format, Turtles","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMONY/GvtuX3pWFNxZg7gCI"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"oP4qYP0ktngh"},"source":["[Learning Plan Index](https://docs.google.com/document/d/1B5yWb6wCSRhqD42iWxCi7bmLPY2EqvU6pbiEQT0zs20/edit?usp=sharing)\n","\n","\n","[03P - 01 - Unit 3 Math Functions, Strings, Objects Problems](https://docs.google.com/document/d/1FxfS3U8lf2mMyDJsCkyiHqLP0Qr694Xn-1iRpGvb9TQ/edit?usp=sharing)\n","\n","#[Mathematical Functions](https://docs.python.org/3/library/math.html)\n","\n","Unit 3 covers mathematical functions, which is too large of a topic for this document so explore the link in the heading to python.org, as well as this link to [W3School.com](https://www.w3schools.com/python/python_ref_functions.asp) for details.\n"]},{"cell_type":"markdown","metadata":{"id":"oykYRmSW0eZu"},"source":["#Strings (text)\n","\n","Strings can be in single quotes or double quotes, there is no data type for single characters.  The convention is to use single quotes for single string characters and double quotes for anything more than one character.\n","\n","Example:\n","\n","‘A’\n","\n","“All the words” \n","\n","[String Methods](https://www.w3schools.com/python/python_ref_string.asp) for working with ASCII ([ASCII is 128 character set](https://www.w3schools.com/charsets/ref_html_ascii.asp))\n","\n","ASCII numbers range from 0-127\n","ASCII Characters are upper, lower case letters, numbers 0-9, and 66 other characters\n","\n","ord() returns the ASCII number value of a letter\n","\n","chr() will return the ASCII letter associated with the number\n","\n","ord(‘a’) returns 97 \t\t\n","chr(97) returns ‘a’    \n","\n","The difference between cases is 32 so: ord(‘a’) - ord(‘A’) will equal 32\n","\n","The String function will convert a number to a string -    str(3.4) will equal “3.4”\n","\n","Python also supports Unicode which is a bigger character set, that ASCII is a subset of.\n"]},{"cell_type":"code","metadata":{"id":"mHYINOzE0k1y","colab":{"base_uri":"https://localhost:8080/","height":187},"executionInfo":{"status":"ok","timestamp":1581009002026,"user_tz":300,"elapsed":268,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAal7SoN20VzbrHnHUoXsjoNTa9aDC6aG5vGpPl=s64","userId":"02111247687678533158"}},"outputId":"939dc7a3-391f-4960-b8bf-a174d6dfa18e"},"source":["print(\"1. The ASCII number for \\\"a\\\" is: \" ,  ord('a')) \t#97 is the ASCII code for a lower case ‘a’\n","print(\"2. The ASCII number for \\\"A\\\" is: \" ,  ord('A')) \t#97 is the ASCII code for a lower case ‘a’\n","\n","print()\n","print(\"3. The ASCII character for 97 is: \" ,  chr(97)) \t#97 is the ASCII code for a lower case ‘a’\n","\n","print()\n","print(\"4. The difference between a - A = \", end='')\n","print(ord('a') - ord('A')) #this will print 32 on the same line as print #4\n","\n","print()\n","print(\"5. chr(ord(A) + 32) = \", end='')\n","print(chr(ord('A') + 32))  #this will print 'a' on the same line as print #5\n","print()\n","\n","#this ia a for loop which we haven't covered yet, but it allows me to output the alphabet\n","#I can do this by converting the loop counter x into its corresponding character\n","for x in range(65,91):\n","  print(chr(x), end=' ')  #this will print the alphabet in upper case on one line\n","  "],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. The ASCII number for \"a\" is:  97\n","2. The ASCII number for \"A\" is:  65\n","\n","3. The ASCII character for 97 is:  a\n","\n","4. The difference between a - A = 32\n","\n","5. chr(ord(A) + 32) = a\n","\n","A B C D E F G H I J K L M N O P Q R S T U V W X Y Z "],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"YbJAXZwCv6el"},"source":["#Concatenation\n","\n","In programming we often have to combine multiple different things into one ouput statement to the user.  The combining of outputs is known as concatenation.  There are a few ways to do it in python.\n","\n","We can use a plus sign:\n","\n","print(\"hello \" + \"World\") will combine the string output of \"hello\" and \"world\" into a single output.  Notice after the world \"hello \" I included a space so there would be space between the two words.\n","\n","The one problem with the plus sign is when you combine text and numbers.  Python will throw an error because it tries to add the two things together instead of combining them.  You cannot do math with words .... most of the time.\n","\n","\n","I can also use a , between outputs:\n","print(\"hello\",\"world\") the comma will add a space between outputs automatically, so I did not add a space in this example."]},{"cell_type":"code","metadata":{"id":"6wszBReawPu4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1613664160563,"user_tz":300,"elapsed":904,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"88ceeb16-96f6-4aa4-fc95-83faa98f9b46"},"source":["#the plus sign in the print statement is not adding it is combining outputs\n","print(\"1. hello \" + \"World\")\n","\n","#using the + with just numbers will result in math and not concatenation\n","print(2 + 2)  #this will print the number 4\n","\n","#the comma will add a space between the different outputs\n","print(\"2. hello\",\"world\")\n","\n","#the comma will treat each element seperately so I can do math within my output\n","print(\"3. hello\", 2 + 5)\n","\n","#You can also use the numeric addition operator to build a single ouput message for your users.\n","message = \"4. hello\"\n","message += \" world\"\n","print(message)\n","\n","print(\"5. this will not error \" + str(101))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. hello World\n","4\n","2. hello world\n","3. hello7\n","4. hello world\n","5. this will not error 101\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"zU4RrGDPzQ5B"},"source":["#The code below will throw an error because I cannot do math with words.  So the + will fail when I combine numbers and text\n","print(\"this will error\" + 101)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VKVb72hfz7T8"},"source":["#Escape Sequences\n","\n","Some characters or features have to be output using escape sequences.\n","\n","Feature   -   Escape Sequence     -   ASCII#\n","\n","Backspace    \\b                     8\n","\n","Tab          \\t                     9\n","\n","Linefeed    \\n     10   (causes print output to go to new line)\n","\n","Formfeed      \\f    12  (if printing will cause printing page to end an another new page to start)\n","\n","Carriage Return    \\r   13\n","\n","Backslash    \\\\      92\n","\n","Single Quote     \\’    39\n","\n","Double Quote     \\”       34"]},{"cell_type":"code","metadata":{"id":"9H5wsc6y3wgx","colab":{"base_uri":"https://localhost:8080/","height":459},"executionInfo":{"status":"ok","timestamp":1581009165418,"user_tz":300,"elapsed":294,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAal7SoN20VzbrHnHUoXsjoNTa9aDC6aG5vGpPl=s64","userId":"02111247687678533158"}},"outputId":"046e301e-5086-4f9a-f588-f763aab67f1e"},"source":["print(\"1. There is a space after hello and another before world, but the backspace leaves one space between the words:\")\n","print(\"2. hello \\b world\")\n","\n","print()\n","print(\"3. This will allow a return \\nin the middle of my output\")\n","print()\n","\n","print(\"4. This would be the last thing printed on a page \\f and this would be the first thing to print on the next page \")\n","print()\n","\n","print(\"5. Carriage return causes my output to return to the beginning of the current line.\")\n","print(\"6. In the print statement below the word \\\"Carriage\\\" is over written by the word \\\"Return\\\" because of the \\\\r\")\n","print(\"7. Carriage \\rReturn\")\n","print()\n","\n","print(\"8. If I want to print a backslash I need to escape it \\\\ or I could use the ASCII value\" , chr(92))\n","print()\n","\n","print(\"9. if I want a \\' or a \\\" I need to escape those characters\")\n","print()\n","print(\"10. Below I am using the tab escape sequence to print the escape info in a lined up format\")\n","print(\"Feature \\t Escape Sequence \\t\\t ASCII#\")\n","print(\"Backspace \\t\\t \\\\b \\t\\t\\t 8\")\n","print(\"Tab \\t\\t\\t \\\\t \\t\\t\\t 9\")\n","print(\"Linefeed \\t\\t \\\\n \\t\\t\\t 10\")\n","print(\"Formfeed \\t\\t \\\\f \\t\\t\\t 12\")\n","print(\"Carriage Return \\t \\\\r \\t\\t\\t 13\")\n","print(\"Backslash \\t\\t \\\\\\\\ \\t\\t\\t 92\")\n","print(\"Single Quote \\t\\t \\\\\\' \\t\\t\\t 39\")\n","print(\"Double Quote \\t\\t \\\\\\\" \\t\\t\\t 34\")\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. There is a space after hello and another before world, but the backspace leaves one space between the words:\n","2. hello \b world\n","\n","3. This will allow a return \n","in the middle of my output\n","\n","4. This would be the last thing printed on a page \f and this would be the first thing to print on the next page \n","\n","5. Carriage return causes my output to return to the beginning of the current line.\n","6. In the print statement below the word \"Carriage\" is over written by the word \"Return\" because of the \\r\n","7. Carriage \rReturn\n","\n","8. If I want to print a backslash I need to escape it \\ or I could use the ASCII value \\\n","\n","9. if I want a ' or a \" I need to escape those characters\n","\n","10. Below I am using the tab escape sequence to print the escape info in a lined up format\n","Feature \t Escape Sequence \t\t ASCII#\n","Backspace \t\t \\b \t\t\t 8\n","Tab \t\t\t \\t \t\t\t 9\n","Linefeed \t\t \\n \t\t\t 10\n","Formfeed \t\t \\f \t\t\t 12\n","Carriage Return \t \\r \t\t\t 13\n","Backslash \t\t \\\\ \t\t\t 92\n","Single Quote \t\t \\' \t\t\t 39\n","Double Quote \t\t \\\" \t\t\t 34\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mWB33g0c9V93"},"source":["#Printing without the Newline\n","\n","You can use the \"end=\"\" in a print statement to keep your output on the same line and control what prints between those output statements."]},{"cell_type":"code","metadata":{"id":"3eFAe_rU-I2T","colab":{"base_uri":"https://localhost:8080/","height":68},"executionInfo":{"status":"ok","timestamp":1581009261842,"user_tz":300,"elapsed":354,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAal7SoN20VzbrHnHUoXsjoNTa9aDC6aG5vGpPl=s64","userId":"02111247687678533158"}},"outputId":"cc1915aa-e72c-40da-814e-097cc7f74f32"},"source":["#below will print \"line 1 line 2 line 3\"\n","print(\"line 1\", end=\" \")\n","print(\"line 2\", end=\" \")\n","print(\"line 3\", end=\" \")\n","\n","print()\n","print()\n","\n","\n","#below will print \"line 1 | line 2 | line 3 | \"\n","print(\"line 1\", end=\" | \")\n","print(\"line 2\", end=\" | \")\n","print(\"line 3\", end=\" | \")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["line 1 line 2 line 3 \n","\n","line 1 | line 2 | line 3 | "],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"QR0VYllv1MZg"},"source":["#Python Objects\n","\n","In python all datum(integers, floats, strings, etc.) are objects and we can use the id() and type() functions to show that.  This doesn't serve a big purpose other then letting me get a sense of what python is doing behind the scenes."]},{"cell_type":"code","metadata":{"id":"kj7YogDR1QPU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1615218923378,"user_tz":300,"elapsed":244,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"f7381569-77d4-4609-a98d-83927a214b19"},"source":["#I will create a number variable to show that the variable is an object\n","print(\"1. \", end='')\n","num = 5\n","print(id(num))\n","print(\"2. \", end='')\n","print(type(num))\n","\n","print()\n","\n","#I will set a second variable to the value of the first and you will see by the id number that the two variables are actually the same object\n","num2 = num\n","print(\"3. \", end='')\n","print(id(num2))\n","print(\"4. \", end='')\n","print(type(num2))\n","\n","print()\n","\n","#I will change the second variable so that you can see that when changed the second variable becomes its own object\n","num2 += 1\n","print(\"5. \", end='')\n","print(id(5.6888))\n","print(\"6. \", end='')\n","print(type(num2))\n","\n","print()\n","\n","#creating a string so you can see it is a different type then the integers above\n","mystring = \"Hello World\"\n","print(\"7. \", end='')\n","print(id(mystring))\n","print(type(mystring))\n","\n","print()\n","\n","myfloat = 5.6\n","print(\"8. \", end='')\n","print(\"id =\", id(myfloat))\n","print(\"type =\", type(myfloat))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. 94060283914880\n","2. <class 'int'>\n","\n","3. 94060283914880\n","4. <class 'int'>\n","\n","5. 139717517283664\n","6. <class 'int'>\n","\n","7. 139717516622704\n","<class 'str'>\n","\n","8. id = 139717517283792\n","type = <class 'float'>\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"lnps3s5Y3l1P"},"source":["#Formatting Output\n","\n","The format() function allows a programmer to format their output into the format that they want.  This [Google Doc](https://docs.google.com/document/d/19u2m9hp4lBJSlQ-7GSnaS2lnPhDlwwoSLHMAEaksjAs/edit?usp=sharing) has a table that summarizes the different uses for format(). Here is another link to [w3schools](https://www.w3schools.com/python/ref_func_format.asp) with information about the fomart() method."]},{"cell_type":"code","metadata":{"id":"be--whHs7kxn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631893575093,"user_tz":240,"elapsed":131,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"49418bee-6494-4bee-a0f1-83ab4420ef23"},"source":["#Format the float item with width 7 and precision 2\n","#this would have been a better way of getting out mortgage output to two decimal places\n","print(\"1. set 1319.22345 to float format in seven spaces and 2 decimal places: \" + format(1319.22345, \"7.2f\"))  #uses 7 spaces\n","print(\"2. set 1319.22345 to float format in ten spaces and 2 decimal places: \" + format(1319.22345, \"10.3f\"))  #uses 10 spaces with 3 floating points\n","\n","print()\n","\n","#Format the float item in scientific notation with width 8 and precision 2\n","print(\"3. set 1319.22345 to scientific notation format in eight spaces: \" + format(1319.12345, \"8.2e\"))\n","\n","print()\n","\n","#Format the integer item in decimal format with width 5\n","print(\"4. set 13190 to integer format in five spaces: \" + format(13190, \"5d\"))  #output uses 5 spaces\n","print(\"5. set 13190 to integer format in ten spaces, which causes the extra space: \" + format(13190, \"10d\"))  #output uses 10 spaces\n","\n","print()\n","\n","#Format the integer item in hexadecimal format with width 2\n","print(\"6. set 255 to hexidecimal format in two places: \" + format(255, \"2x\"))  #converts the number to hexadecimal with 2 digits\n","print(\"7. set 500 to hexidecimal format in two places, but that does not restrict the correct answer: \" + format(500, \"2x\"))  #converts the number, the answer is 1f4, the 2 does not limit the length of the answer so that it is wrong\n","print(\"8. set 500 to hexidecimal format in ten places, which causes the extra space: \" + format(500, \"10x\")) #outputs the number to 10 places\n","\n","print()\n","\n","#Format the integer item in octal format with width 2\n","print(\"9. set 255 to octal format in two places, which does not restrict the output: \" + format(255, \"2o\"))   #output 377 is the correct \n","\n","print()\n","\n","#Format the integer item in binary format with width 2\n","print(\"10. set 255 to binary format in two places, which does not restrict the output: \" + format(255, \"2b\"))  #again the width setting does not restrict the output to be less than the complete correct answer\n","\n","print()\n","\n","#Format the integer item in binary format with width 2\n","print(\"11. set .1012 to percentage format in two places and two decimal places: \" + format(.1012, \"2.2%\"))  #again the width setting does not restrict the output to be less than the complete correct answer\n","\n","print()\n","#Format the string to display in 10 spaces notice how far away the x is\n","print(\"12. output string in 10 spaces: \" + format(\"string\", \"20s\") + \" x \")\n","\n","print()\n","#right justify the string output >\n","print(\"13. output string in 10 spaces: \" + format(\"string\", \">20s\") + \" x \")\n","\n","print()\n","#left justify the string output <\n","print(\"14. output string in 10 spaces: \" + format(\"string\", \"<20s\") + \" x \")\n"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["1. set 1319.22345 to float format in seven spaces and 2 decimal places: 1319.22\n","2. set 1319.22345 to float format in ten spaces and 2 decimal places:   1319.223\n","\n","3. set 1319.22345 to scientific notation format in eight spaces: 1.32e+03\n","\n","4. set 13190 to integer format in five spaces: 13190\n","5. set 13190 to integer format in ten spaces, which causes the extra space:      13190\n","\n","6. set 255 to hexidecimal format in two places: ff\n","7. set 500 to hexidecimal format in two places, but that does not restrict the correct answer: 1f4\n","8. set 500 to hexidecimal format in ten places, which causes the extra space:        1f4\n","\n","9. set 255 to octal format in two places, which does not restrict the output: 377\n","\n","10. set 255 to binary format in two places, which does not restrict the output: 11111111\n","\n","11. set .1012 to percentage format in two places and two decimal places: 10.12%\n","\n","12. output string in 10 spaces: string               x \n","\n","13. output string in 10 spaces:               string x \n","\n","14. output string in 10 spaces: string               x \n"]}]},{"cell_type":"markdown","metadata":{"id":"UBg_SlH3ANgm"},"source":["#Turtle Drawing Details\n","\n","Check out this [resource at python.org](https://docs.python.org/3/library/turtle.html) for details on all the features of using Turtles.\n","\n","For Repl.it you need to create a turtle Repl.it vs a regular Repl.it.  The type of Repl.it you create matters.  I cannot create Turtle programs in colab documents.  Check out this [Turtle Repl.it](https://repl.it/@MrReynolds/Unit1ColabExample) for and example.\n","\n","If you are using pycharm for your turtle programs, there are a lines of code that need to be added to the end of your file.  Without these lines of code your turtle window will open, excute, and close before you can really see it.  By adding: by creating your Turtle with myturtle = turtle.Screen() and then adding myturtle.exitonclick() to the end of the program will force the window to stay open until you close it.\n","\n","**myturtle = turtle.Screen()**\n","\n","**myturtle.exitonclick()** \n","\n","[Reference](https://pundit.pratt.duke.edu/wiki/Python:Turtle)"]}]}