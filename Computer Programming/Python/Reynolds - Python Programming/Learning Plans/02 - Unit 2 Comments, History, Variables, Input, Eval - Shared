{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Unit 2 Comments, History, Variables, Input, Eval","provenance":[{"file_id":"1HRz-faYlskr00lXHmTN6DGdnWHKDfeEe","timestamp":1580488534679}],"collapsed_sections":[],"authorship_tag":"ABX9TyPY9cepTBcgK5vibttLfCxJ"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"QzfZk1xfljRM"},"source":["[Learning Plan Index](https://docs.google.com/document/d/1B5yWb6wCSRhqD42iWxCi7bmLPY2EqvU6pbiEQT0zs20/edit?usp=sharing)\n","\n","\n","[02P - 01 - Unit 2 Elementary Programming Problems](https://docs.google.com/document/d/1kdbDF0OQypdztTYIsnCDIhsNnVNgO_vWC1rN73wCvU8/edit?usp=sharing)\n","# Comments \n","\n","Programmers use comments to document what their code is doing so that anyone, another programmer or themselves, will be able to easily understand what the program is doing in the event the program needs to be modified in the future.  Commenting is not something I make up just to torture you, it is a required skill in the programming industry, which could get you fired if neglect to do it.\n","Use a hashtag # for a single line comment\n","Use three apostrophes (''') for a multiline comment \n","\n","#History\n","In the early days of programming programmers would actually make their programs hard to read and understand.  The idea was it would create job security, because the creator would be the only one who could understand what the program was doing.  Before long programmers realized they were only hurting themselves.  First off, there was no shortage of work so there was no benefit to making cryptic programs.  Second programmers found it difficult to modify and maintain poorly written programs.  Do everyone a favor and create readable programs that are easy for any programmer to read and understand.  \n","\n","Even when programmers were trying to make the most efficient code they could they soon discovered challenges with building and maintaining large software projects.  Some early languages had \"goto\" commands which could send a program to another line of the program, versus having the program call a function or method while remaining at the same point in the program.  Code that had goto statements became known as spaghetti code, because trying to follow the flow of the program was like trying to follow one piece of spaghetti on a plate full of spaghetti.  This problem was accentuated by the introduction of GUIs, so there was a real emphasis in the software world of using well defined software engineering processes to help create efficient easy to maintain software.  Also newer languages did away with things like goto statements and instead implemented an Object Oriented Programming approach to software development."]},{"cell_type":"code","metadata":{"id":"9jTT61uUv1lD","colab":{"base_uri":"https://localhost:8080/","height":155},"executionInfo":{"status":"ok","timestamp":1631200973322,"user_tz":240,"elapsed":6,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"8680b61f-3fcd-4fae-8dfb-6a97e7d6e58c"},"source":["###################################################################################\n","#     Having a comment block like this is a common practice \n","#     This block may list info like the programmers name and date of creation\n","#     Usually there is also a brief description of what the program does\n","#     Perhaps with a description of program inputs and outputs\n","###################################################################################\n","\n","\n","#a single line comment may be placed over a block of code with a brief description of what it does\n","print(\"1. this is a block of code, a small lame block, but a block\")\n","\n","print() #print a blank line for a break in output\n","\n","print(\"2. hi\")   #sometimes comments are put at the end of line of code \n","print(\"3. something\") #end of line comments break up the code less\n","\n","print() #print a blank line for a break in output\n","\n","#the code below has been completly commented out\n","#commenting out blocks of code can be done for debugging purposes\n","#it can also be done to presevere a version of the code or a sample for development purposes.\n","\n","print(\"4. Colab Notebooks seem to have an issue with the block comment '''\")\n","'''\n","print(\"5. this code will not work because it is commented out\")\n","print(\"6. this code will not work because it is commented out\")\n","print(\"7. this code will not work because it is commented out\")\n","'''\n","\n"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["1. this is a block of code, a small lame block, but a block\n","\n","2. hi\n","3. something\n","\n","4. Colab Notebooks seem to have an issue with the block comment '''\n"]},{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'\\nprint(\"5. this code will not work because it is commented out\")\\nprint(\"6. this code will not work because it is commented out\")\\nprint(\"7. this code will not work because it is commented out\")\\n'"]},"metadata":{},"execution_count":1}]},{"cell_type":"markdown","metadata":{"id":"aR5gXlDjxaG_"},"source":["# Variables \n","\n","Variables are a fundamental tool of computer programming.  Variables allow us to create a space in memory where we can temporarily store values that we can use and manipulate in our programs.  Variables should always be given meaningful names.  Look at the three programs below, the first has very generic non-descriptive variable names, can you tell what it is doing?  Looking at the second version of the program with meaningful descriptive variable names is it easier to understand the purpose of the program and what it is doing.  Program readability is a key programming skill.  Making a program readable will not only help you when you have to modify the program in the future, but it will help any other programmer that has to work on your program.  Properly documenting a program with comments and descriptive variable names is a basic programming skill. The third version of the program takes user input to demonstrate the power of variables.  This third program is much more useful since in can change its output based on the input received from the user.  Also notice that the third program is spaced and commented slightly differently then the second one.  Which of these programs is easiest for you to read, understand, and work with if you had to modify it.\n","\n","There are rules about what you can name a variable check out this [w3schools reference](https://www.w3schools.com/python/python_variables.asp) for details.  Python [keywords](https://www.w3schools.com/python/python_ref_keywords.asp) cannot be used as variable names, they can only be used for their designated purpose.  Any names you create for variable, function, or class names are called identifiers.\n","\n"]},{"cell_type":"code","metadata":{"id":"XJnFN46S-OWU","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1580575715610,"user_tz":300,"elapsed":857,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAal7SoN20VzbrHnHUoXsjoNTa9aDC6aG5vGpPl=s64","userId":"02111247687678533158"}},"outputId":"d5343e73-b195-42fa-a23f-892d490b48e9"},"source":["#check out the short program below can you tell what it is doing?  \n","#what is the purpose of this program?\n","h = 40\n","r = 15\n","p = h * r\n","t = 0.05\n","n = p - (p * t)\n","print(n)\n","###################### end program ########################\n","\n","\n","\n","\n","\n","\n","\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["570.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"b5a8fAM6p2yj","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1580576735476,"user_tz":300,"elapsed":725,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAal7SoN20VzbrHnHUoXsjoNTa9aDC6aG5vGpPl=s64","userId":"02111247687678533158"}},"outputId":"9845d94f-8955-4736-a27a-280229e68986"},"source":["################################################\n","#  Pay calculator program\n","#  Created by Gordon Reynolds 2/1/2020\n","#  program uses employees pay rate and hours worked to\n","#  calculate employees net pay after taxes\n","################################################\n","\n","hoursWorked = 40  #set employeed hours worked\n","employeePayRate = 15 #set employee pay rate\n","employeeGrossPay = hoursWorked * employeePayRate #calculate gross pay before taxes\n","TAX = 0.05  #constant tax rate is in all caps to denote it is a constant that does not change\n","employeeNetPay = employeeGrossPay - (employeeGrossPay * TAX)  #calculate employee net pay by subtracting calculated tax\n","print(\"Employee net pay is: $\" + str(employeeNetPay))  #output net pay to user"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Employee net pay is: $570.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"cCN9g6i0r_NE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612815378585,"user_tz":300,"elapsed":5136,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"9a640818-7b24-4d43-8a61-d907d4f8bd46"},"source":["################################################\n","#  Pay calculator program that takes user input to make it more useful and flexible\n","#  The use of variables makes more sense in this version since their value changes based\n","#  on user input\n","#  Created by Gordon Reynolds 2/1/2020\n","#  program uses employees pay rate and hours worked to\n","#  calculate employees net pay after taxes\n","################################################\n","\n","#get user input of hours worked and pay rate\n","hoursWorked = eval(input(\"Please enter the hours worked by the employee: \"))  \n","employeePayRate = eval(input(\"Please enter the pay rate of the employee: \")) \n","\n","#calculate gross pay and then net pay based on current tax rate\n","employeeGrossPay = hoursWorked * employeePayRate \n","TAX = 0.05  \n","employeeNetPay = employeeGrossPay - (employeeGrossPay * TAX)  \n","\n","#output employee net pay to user\n","print(\"Employee net pay is: $\" + str(employeeNetPay))  #output net pay to user"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Please enter the hours worked by the employee: 40\n","Please enter the pay rate of the employee: 12\n","Employee net pay is: $456.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qyvYJFm-uERl"},"source":["#Assigning Values to Variables\n","\n","We use a simple \"=\" sign to assign values to a variable.  A single \"=\" sign says take the value on the right and store it in the variable on the left.  Later when we want to compare things we will use double \"==\" signs, which checks to see if two things are the same.  If they are the \"==\" will return true and false if they are not the same.\n","\n","Python allows us to assign multiple values at once and it has a great feature that allows us to swap values between variables."]},{"cell_type":"code","metadata":{"id":"5SNeZrbqvsUK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1612815522284,"user_tz":300,"elapsed":535,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"685d5b57-ed4c-476a-abda-76f6a7f5c4d7"},"source":["#You can assign a group of variables in one statement\n","l = m = n = o = 7\n","print(\"1. \", end='')\n","print(l, m, n, o)\n","\n","#This great feature of python allows you to swap variable values\n","H = 7\n","J = 8\n","print(\"2. \", end='')\n","print(H,J) #output original values of H and J\n","\n","H, J = J, H #swap the values of the two variables\n","print(\"3. \", end='')\n","print(H, J) #output values so you can see the swap has happened\n","\n","\n","#you could swap four variables if you needed to\n","w = 4\n","x = 5\n","y = 6\n","z = 7\n","\n","print(\"4. \", end='')\n","print(x,y,z,w)\n","x,y,w,z = y,x,z,w\n","\n","print(\"5. \", end='')\n","print(x,y,z,w)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1. 7 7 7 7\n","2. 7 8\n","3. 8 7\n","4. 5 6 7 4\n","5. 6 5 4 7\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1FB4vg7Wvepk"},"source":["#Getting User Input\n","\n","To get input from users, you can use the input() method.\n","\n","The input method is a return method so you have to set a variable to take the value that is returned from the method in order to use it.\n","\n","Any input received through the input method will be in a string format.  Any number input will have to be converted from a string format into an integer or float format in order to use it mathematically as a number.\n","\n","You can convert the number on input by combining the input() method with the eval() method.  You can also convert the number with the int() or float() methods.\n","\n","You can also get multiple inputs from one input statement.\n","\n","It is also possible to get multiple values from a user from one input statement when you use th "]},{"cell_type":"code","metadata":{"id":"yIsvLuDcxqKG"},"source":["#this program will throw an error because the number input has not been converted to a number format\n","x = input(\"enter a number: \")\n","\n","print(5 + x)  #this code fails because x = \"5\" instead of 5"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DmfdvbxS3QCI","colab":{"base_uri":"https://localhost:8080/","height":600},"executionInfo":{"status":"error","timestamp":1631201669034,"user_tz":240,"elapsed":19317,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"17e5d98d-d67d-4e81-beb9-896c29b30a5c"},"source":["#below are examples of how number input can be converted to a number format for mathematical purposes \n","\n","#this uses the eval method to convert the number to an int on input\n","x = eval(input(\"enter a number for x: \"))\n","print(\"1. x =\" , x , \", x + 5 = \", end =\"\")\n","print(5 + x)  #this works because the eval method converted the input before storing it in x\n","\n","\n","\n","#this doesn't use the eval method so it must be converted anytime I want to use the input as a number\n","y = input(\"enter a number for y: \")\n","print(\"2. y =\" , y , \", y + 5 = \", end =\"\")\n","print(5 + int(y))  #using the int method to convert the input to an int during output\n","\n","print(\"3. y =\" , float(y) , \", y + 5 = \", end =\"\")\n","print(5 + float(y))  #converting input to a float on output\n","\n","y = int(y)  #this converts the variable so I can now use it as a number wherever I want\n","print(\"4. y =\" , y , \", y + 5 = \", end =\"\")\n","print(5 + int(y))\n","\n","#code below will allow me to get three inputs from my user at one time\n","x, y, z = eval(input(\"Enter three numbers seperated by commas(1,2,3): \"))\n","\n","print(\"5. \", end='')\n","print(x,y,z)\n","\n","#the split function will allow me to get multiple inputs with just a space between them\n","x, y, z = input(\"Enter three numbers with spaces between them(1 2 3): \").split()\n","print(\"6. \", end='')\n","print(x,y,z)\n","\n","#with the split method you can set what character will determine where the numbers are split\n","x, y, z = input(\"Enter three numbers with a # between them (1#2#3): \").split(\"#\")\n","print(\"7. \", end='')\n","print(x,y,z)\n","\n","#this is just the tip of the iceberg of what you can do with inputs"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["enter a number for x:5\n","1. x = 5 , x + 5 = 10\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 729\u001b[0;31m                 \u001b[0mident\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdin_socket\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    730\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jupyter_client/session.py\u001b[0m in \u001b[0;36mrecv\u001b[0;34m(self, socket, mode, content, copy)\u001b[0m\n\u001b[1;32m    802\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 803\u001b[0;31m             \u001b[0mmsg_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_multipart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    804\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mzmq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mZMQError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/zmq/sugar/socket.py\u001b[0m in \u001b[0;36mrecv_multipart\u001b[0;34m(self, flags, copy, track)\u001b[0m\n\u001b[1;32m    618\u001b[0m         \"\"\"\n\u001b[0;32m--> 619\u001b[0;31m         \u001b[0mparts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    620\u001b[0m         \u001b[0;31m# have first part already, only loop while more to receive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket._recv_copy\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/zmq/backend/cython/checkrc.pxd\u001b[0m in \u001b[0;36mzmq.backend.cython.checkrc._check_rc\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: ","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-c625b83b05a9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m#this doesn't use the eval method so it must be converted anytime I want to use the input as a number\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"enter a number for y: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"2. y =\"\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0;34m\", y + 5 = \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;34m\"\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m#using the int method to convert the input to an int during output\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    702\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 704\u001b[0;31m             \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    705\u001b[0m         )\n\u001b[1;32m    706\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    732\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    733\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 734\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    735\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    736\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"52pL-oYSbYfL"},"source":["#Managing User Input\n","When you are getting input from a user there are a number of important things to consider:\n","\n","\n","1.   Your output message to the user needs to be clear and easy to understand so the user knows exactly what they are supposed to do.  **I DO EXPECT YOU TO DO THIS WITH ALL INPUT IN PROGRAMS GOING FORWARD.**\n","\n","2.   Add a space after your input message so that it looks like \"enter age: \"15, instead of \"enter age:\"15.  **I DO EXPECT YOU TO DO THIS WILL ALL INPUT IN PROGRAMS GOING FORWARD.**\n","\n","3. Normalize the input accounting for case: This means you should convert the user input to upper or lower case so you can easily compare it.  If I ask the user to enter \"Yes\" or \"No\", I can covert that input to lower case and then compare it to \"yes\" and \"no\" and I don't have to worry about all the different ways input could have been entered.  Once you get to unit 2 **I DO EXPECT YOU TO DO THIS WILL ALL TEXT INPUT IN PROGRAMS GOING FORWARD.**\n","\n","4. Normalize the input with a [strip](https://www.w3schools.com/python/ref_string_strip.asp): it is a good idea to remove any whitespace that the user may have inadvertently added to their input.  If they entered \" password \" and you compare that to \"password\" it will come back as wrong because of the white space.  You wouldn't be expected to do this until unit three when we get to strings.  This is not something I will activlely test in your programs, but it is a technique you should employ in your programs.\n","\n","5. Normalize the input with a loop: if the user has to enter a number or something within a range enclosing the input inside of a loop so that they will be continuously asked for the correct input will ensure you get good input.  You of course won't be expected to do this until unit 5 loops.  **problems will state when you have to do this.**\n","\n","6. Adjust your input - in some cases if you have a really long input message it can cause the input cursor to land in the middle of your text.  If this happens use a print statement to output the message and then right after it use an input statement. **I DO EXPECT YOU TO DO THIS WILL ALL TEXT INPUT IN PROGRAMS GOING FORWARD.**\n","\n","7. Catch errors from user input.  In some cases if a user inputs text when it should be an integer your program will crash with an error.  You can catch these errors and even place the catches in a loop so the program does not crash, but asks for the correct type of input.  This is not something I will be testing, but it would certainly be a requirement in a real world situation.\n","\n","Look at these web resources for examples of these input techniques.\n","\n","[Python User Input](https://towardsdatascience.com/a-complete-guide-to-user-input-in-python-727561fc16e1)\n","\n","[Normalizing Text Input](https://www.geeksforgeeks.org/normalizing-textual-data-with-python/)\n","\n"]}]}