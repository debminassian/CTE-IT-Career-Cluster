{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Unit 7 Lists","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNXRkRLjNNOISAocRWbENbT"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"5tJx8cJy-d4q"},"source":["[Learning Plan Index](https://docs.google.com/document/d/1B5yWb6wCSRhqD42iWxCi7bmLPY2EqvU6pbiEQT0zs20/edit?usp=sharing)\n","\n","\n","[07P - 01 - Unit 7 Lists Python Problems](https://docs.google.com/document/d/1gE2mAEIkAx6nGHOrpwtqT81XWCWXPq_X_tMHkO60si8/edit?usp=sharing)\n","\n","#Lists \n","Lists allow for storing multiple values in a single entity.  Lists are classes that have a number of built in methods associated with them.  Lists are very powerful tools for managing and manipulating data.  Lists store multiple values that can be accessed by their index number.  Indexes begin at 0 and end at len(listname) - 1.  Understanding indexes in regards to lists and strings is vital if you are going to understand lists and how to use them.  Check out this [Google Doc](https://docs.google.com/document/d/19JfIPj9o-D6NC81zXyeaNeZzCQmjSs8go0OQKNNV1pk/edit?usp=sharing) about Lists to see an explaination about indexes.\n","\n","\n","\n","```\n","# Creating Lists:\n","List1 = list() \t\t\t\t          #create an empty list\n","List2 = list([2,3,4]) \t\t\t       #create a list with elements 2,3,4\n","List3 = list([“red”, “green”, “blue”])   #creates a list with strings\n","List4 = list(range(3,6)) \t\t        #create a list with elements 3,4,5\n","List5 = list(“abcd”) \t\t\t        #create a list with characters a,b,c,d\n","List6 = list([“abcd”]) \t\t\t      #create a list with string “abcd”\n","List7 = []\t\t\t\t               #same as list()\n","List8 = [2,3,4]\t\t\t              #same as list([2,3,4])\n","List9 = [“red”, “green”, “blue”]\t     #same as list([“red”, “green”, “blue”])\n","\n","Lists can hold mixed data types:\n","List10 = [2, “three”, ‘c’]\t\t       #This will work\n","\n","\n","```\n","\n","The code below has to be run for some of the other code blocks later in the document to work.  These lists have to exist for the later code blocks to use them.\n","\n"]},{"cell_type":"code","metadata":{"id":"w6tM87m-9kny"},"source":["#Creating Lists:\n","list1 = list() \t\t\t\t                   #create an empty list\n","list2 = list([2,3,4]) \t\t\t             #create a list with elements 2,3,4 - do not use in repl.it\n","list3 = list([\"red\", \"green\", \"blue\"])   #creates a list with strings\n","list4 = list(range(3,10)) \t\t           #create a list with elements 3,4,5,6,7,8,9\n","list5 = list(\"abcd\") \t\t\t               #create a list with characters a,b,c,d\n","list6 = list([\"That is the question\"]) \t #create a list with string “That is the question”\n","list7 = []\t\t\t\t                       #same as list()\n","list8 = [2,3,4]\t\t\t                     #same as list([2,3,4]) use this in repl.it\n","list9 = [\"red\", \"green\", \"blue\"]\t       #same as list([“red”, “green”, “blue”])\n","\n","#Lists can hold mixed data types:\n","list10 = [36, \"or\", 'b']\t\t       #This will work\n","\n","print(\"1.\", list2[0], list5[1], list10[1], not(all(list1)), list8[0], list10[2])\n","print(\"2.\", list6[0])\n","\n","#below are ways I can create a boolean list of desired length and set all the values to true of false\n","boolList = 10 * [True]\n","print(\"3.\", boolList)\n","boolList = 10 * [False]\n","print(\"3.\", boolList)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"i0aiF29XX2gq"},"source":["#Lists are Sequence Type:\n","Lists and Strings are both sequence types.  A string is a sequence of characters and a list is a string of elements.  There are a number of common operations you can perform on sequence types:\n","\n","\n","\n","```\n","# Sequence Operations\n","\n","Notes: s = sequence, n = number, x = variable, i,j = index counter\n","\n","**Operation**                  **Description**\n","x in s                         True if element x is in sequence s\n","x not in s                     True if element x not in sequence s\n","s1 + s2                        Concatenates two sequences s1 and s2\n","s * n, n * s                   n copies of sequence s are concatenated\n","s[i]                           ith element is sequence s\n","s[i : j]                       Slice of sequence s from index i to j-1\n","len(s)                         Length of sequence s i.e. the number of elements in sequence s\n","min(s)                         Returns the smallest element of sequence s\n","max(s)                         Returns the largest element of sequence s\n","sum(s)                         Sum all numbers in sequence s\n","for loop                       Traverse elements from left to right in a for loop\n","<, <=, >, >=, ==, !=\n","\n","\n","\n","```\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"pR_egzBrZEqQ"},"source":["print(\"1.\", \"red\" in list3)\n","print(\"2.\", \"green\" not in list3)\n","\n","#combing two lists into a new list\n","#or just output list8 + list9 \n","list11 = list8 + list9\n","print(\"3.\", list11)\n","print(\"4.\", list8 + list9)\n","\n","#put 5 copies of list10 into list12\n","#or just output 5 * list10\n","list12 = 5 * list10\n","print(\"5.\", list12)\n","print(\"6.\", 5 * list10)\n","\n","#access a single element by referencing its index, indexs start at 0\n","print(\"7.\", list5[3])\n","\n","\n","#output the contents of the list from index 1-2, the first # is inclusive and the second is exclusive\n","print(\"8.\", list4[1:5])\n","\n","#output contents of list to compare to slices\n","print(\"9.\", list4)\n","\n","#output the contents of the list from index 0 because there is not number to the left of the :\n","#stop outputting at the second to last number exclusive\n","print(\"10.\", list4[:-2])\n","\n","#output the length of a list\n","print(\"11.\", len(list4))\n","\n","#output the smallest, the largest, and the sum of the numbers in list4\n","print(\"12.\", min(list4))\n","print(\"13.\", max(list4))\n","print(\"14.\", sum(list4))\n","\n","#output the contents of a list with a for loop\n","print(\"15.\", end=' ')\n","for x in list2:\n","  print(x, end=', ')\n","\n","print()\n","#compare the sum of two lists\n","print(\"16.\", sum(list4) >= sum(list8))\n","\n","revlist = list3[::-1]  #reverse a sequence you could do this with a word as well\n","print(\"17. list3:\", list3, \"reversed is\", revlist)\n","\n","mystring = \"palindrome\"\n","print(\"18. mystring\", mystring, \"reversed is\",  mystring[::-1])\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"J6CYp7R7jj-t"},"source":["#List Methods\n","Below are methods that belong to lists, if you check the [Google Doc about lists](https://docs.google.com/document/d/19JfIPj9o-D6NC81zXyeaNeZzCQmjSs8go0OQKNNV1pk/edit?usp=sharing) you will see an even bigger list of functions that can be used with lists.  The methods used below are built into the list class.  The additional Functions mentioned in the Google Doc are not part of the list class, but those other functions can be used with lists.  Again a function is a named piece of code.  A method is a function that is created inside of a class, so a method is a function that belongs to a class object. "]},{"cell_type":"code","metadata":{"id":"Hy40zaZ2wZYP"},"source":["import random\n","#first clearing list1 because everytime this code is run the appends are added to the list\n","#now that list1 is empty list we will add two things to the list\n","\n","list1.clear()\n","list1.append(\"String added to list 1\")\n","list1.append(\"yes it is\")\n","print(\"1.\", list1)\n","\n","#extend will add the contents of list3 onto the end of list1\n","list1.extend(list3)\n","print(\"2.\", list1)\n","\n","#using insert to add something to the list at a given index, in this case it is 0 which is the first thing in the list\n","list1.insert(0, \"Mr. Reynolds Rules\")\n","print(\"3.\", list1)\n","\n","#using remove to take something out of the list by giving it the thing I want removed\n","#if there is more than one instance of the thing you said to remove, the first instance will be removed\n","list1.remove(\"Mr. Reynolds Rules\")\n","print(\"4.\", list1)\n","\n","#using the index method to get the index number for the 'red' element in list1\n","print(\"5. The index for 'red' in list1 is:\", list1.index(\"red\"))\n","\n","#using the count method to find our how many times 'red' appears in list1\n","print(\"6. How many times does 'red' appear in list1:\", list1.count(\"red\"))\n","\n","#using the pop method to remove something at a particular index\n","list1.pop(3)\n","print(\"7. I have removed the list item, 'green', at index 3 from list1:\", list1)\n","\n","#using index() to get the index number of an item so I can remove it with pop()\n","list1.pop(list1.index(\"red\"))\n","print(\"8. I have removed the list item, 'red', from list1 by using index() to retrieve its index number:\", list1)\n","\n","#calling reverse() method which will reverse the things in my list\n","list1.reverse()\n","print(\"9. reversed list1 with reverse() method:\", list1)\n","\n","lister = list()\n","for x in range(0,100):\n","  lister.append(random.randint(1,100))\n","\n","print(\"10. The new list before it is sorted\", lister)\n","lister.sort()\n","print(\"11. The new list after it is sorted\", lister)\n","\n","#using the equals with list does not make a copy of the list it causes the new list\n","#lsiter2 to point to the same list in memory that list1 points to\n","#any change I make to either list will effect both\n","lister2 = list1\n","\n","#I add something to lister2, which also shows as being added to list1, these are really two instances pointing to the same list in memory\n","lister2.append(\"Beige\")\n","print(\"12. I have made a copy of list1 called lister and added 'Beige' to it:\", lister2)\n","print(\"13. The copy I made with '=' is not a copy, but another version pointing to the same list, here is what list1 has now:\", list1)\n","\n","#remove beige from list1\n","list1.pop(list1.index(\"Beige\"))\n","print(\"14. contents of list1 after removing Beige:\", list1)\n","\n","#clear lister2 so it is blank, since lister2 and list1 point to the same thing both lists are cleared by clearing one of them\n","lister2.clear()\n","print(\"15. contents of lister2 after lister2.clear():\", lister2)\n","print(\"16. contents of list1 after lister2.clear():\", lister2)\n","\n","#now by using the copy method I will make an actually copy of list1 in lister2\n","lister2 = list1.copy()\n","#I will now add beige to lister2\n","lister2.append(\"Beige\")\n","\n","print(\"16. contents of list1 after adding Beige to lister:\", list1)\n","print(\"17. contents of lister2 after making a copy of list1 and adding beige:\", lister2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BCMxLAP2GUsc"},"source":["#Out of Bounds Error\n","An out bounds error will occur if you try to access an index that is too low or too high for the list or string you are working with.  Python is a unique language in that it will allow you to access an element with a negative number.  If I were to use -1 as an index I would go from the first thing in the list to the last thing in the list.  I can go negative until I go beyond the first thing a second time.  I cannot do the same thing with a positive number, I cannot use an index that is greater than the index of the last item in the list, which will be at the length of the list - 1.\n","\n","In most languages I can never have an index less than 0 because that will be out of bounds, but python will use negative numbers to wrap around to the end of the list.  \n","\n","There are two code blocks below.  The first one demonstrates acceptable uses of indexes in regards to lists.  The second code block will throw out of bounds errors because I am misusing the index numbers.  Out of bounds errors are for security purposes.  There are languages that do not throw out of bounds errors, which means a hacker could try and access an out of bounds element, which would give the hacker access to the memory location that is located just before or after the list object.  That is a bad thing."]},{"cell_type":"code","metadata":{"id":"FTMSK_09MM2e"},"source":["mylist = [0,1,2]\n","\n","print(\"1. contents of mylist[]\", mylist)\n","print(\"2. @ index 0:\", mylist[0])\n","print(\"3. @ index 1:\", mylist[1])\n","print(\"4. @ index 2:\", mylist[2])\n","print(\"5. @ index -1:\", mylist[-1])\n","print(\"6. @ index -2:\", mylist[-2])\n","print(\"7. @ index -3:\", mylist[-3])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"D-Tne04iPCiB"},"source":["#both lines of code below will throw an error because both requests are just beyond the bounds of mylist so an out of bounds error happens\n","print(\"1. @ index 0:\", mylist[3])\n","print(\"2. @ index 1:\", mylist[-4])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LyBXoDW6c3KF"},"source":["#List Slicing  listname[inclusive:exclusive]\n","\n","List slicing is listed above in the \"Lists are Sequence Type\" section, but will cover a little more in depth here.\n","\n","The numbers used in the slices are the indices of the list, so listname[1,4] will return the items at indices 1-3.\n"]},{"cell_type":"code","metadata":{"id":"o-gJChW4gAYx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1630424247613,"user_tz":240,"elapsed":125,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"704ffae8-6ff0-495f-f9dd-ddf83c7db065"},"source":["import random\n","#Create a new list to manipulate with slicing, clear it first so it starts fresh everytime this is run\n","\n","listname = list()\n","listname.clear()\n","\n","#place 20 random captial letters in a list\n","for x in range(0,30):\n","  listname.append(x)\n","\n","print(\"1. contents of list after 30 numbers are added in order\", listname)\n","\n","print(\"2. listname[1:5] results:\", listname[1:5])\n","\n","#using the index() function will give me the index numbers of the items I want\n","#below I will get the numbers 4 - 14\n","print(\"3. listname[listname.index(4):listname.index(15)] results:\", listname[listname.index(4):listname.index(15)])\n","\n","\n","#I can add a third parameter that will control the count in the selection\n","#below I am going slice the list counting by 2 \n","print(\"4.listname[2:29:2] results:\", listname[2:29:2])\n","\n","#\n","print(\"5. listname[::-1] will return a reverse of the list, but not change the list\", listname[::-1])\n","print(\"6. listname is unchanged after the use of listname[::-1]\", listname)\n"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["1. contents of list after 30 numbers are added in order [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n","2. listname[1:5] results: [1, 2, 3, 4]\n","3. listname[listname.index(4):listname.index(15)] results: [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n","4.listname[2:29:2] results: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n","5. listname[::-1] will return a reverse of the list, but not change the list [29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n","6. listname is unchanged after the use of listname[::-1] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n"]}]},{"cell_type":"markdown","metadata":{"id":"SqFY9ta4IJPj"},"source":["#Miscellaneous List Uses\n","\n","We can use the split() method to split a string into a list.\n","\n","We can use a list to store multiple inputs from a user"]},{"cell_type":"code","metadata":{"id":"-FGM4oIlIXqo","colab":{"base_uri":"https://localhost:8080/","height":544},"executionInfo":{"status":"error","timestamp":1630424244356,"user_tz":240,"elapsed":3268,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"06c40f42-bee7-45ba-d147-5d116a57fe80"},"source":["#using the split() method to take a single sting and store the individual words in a list \n","stringlist = \"My Name is Clark Kent\".split()\n","print(\"1.\", stringlist)\n","\n","\n","#this program will ask the user for input and store that input in a list \n","#until the user types 'done'\n","roster = list()\n","done = \"\"\n","done = input(\"Enter a name for the roster, enter 'done' when you are done.\")\n","while(done != \"done\"):\n","  if done != \"done\":\n","    roster.append(done)\n","    done = input(\"Enter a name for the roster, enter 'done' when you are done. \")\n","    \n","print(\"2. output of names entered:\", roster)\n","\n","#this sample is based off code from chapter 10 page 10 of the book\n","#lists do not have a method for shifting everything to the right or left but a function could be created to do that\n","#This code does not have to return the list since the list, alist, in the function is pointing to the same list that was passed in\n","\n","#create two different lists so we can shift one right and one left\n","shiftlistL = [1,2,3,4]\n","shiftlistR = shiftlistL.copy()\n","\n","#output the two lists before anything happens\n","print(\"3. shiftlistR before shift\", shiftlistR)\n","print(\"4. shiftlistL before shift\", shiftlistL)\n","\n","#this function takes a list and a \"right\" or \"left\" direction to start\n","#a common issue when dealing with swapping multiple elements is the need for \n","#some kind of temp element to hold one thing so everything else can be moved\n","#once the move is done we take the thing out of temp and place it where it belongs\n","def listShift(alist, direction):\n","  if(direction == \"right\"):\n","    temp = alist[len(alist)-1]\n","    for i in range(len(alist)-1, 0, -1):\n","      alist[i] = alist[i-1]\n","    alist[0] = temp\n","  elif(direction == \"left\"):\n","    temp = alist[0]\n","    for i in range(1, len(alist)):\n","      alist[i - 1] = alist[i]\n","    alist[len(alist)-1] = temp\n","  else:\n","    print(\"second parameter must be 'left' or 'right' for shift direction\")\n","\n","\n","#call function and shift all list elements 1 place to the right\n","listShift(shiftlistR, \"right\")\n","print(\"5. shiftlistR after shift\",shiftlistR)\n","\n","#call function and shift all list elements 1 place to the left\n","listShift(shiftlistL, \"left\")\n","print(\"6. shiftlistL before shift\",shiftlistL)"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["1. ['My', 'Name', 'is', 'Clark', 'Kent']\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 729\u001b[0;31m                 \u001b[0mident\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdin_socket\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    730\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/jupyter_client/session.py\u001b[0m in \u001b[0;36mrecv\u001b[0;34m(self, socket, mode, content, copy)\u001b[0m\n\u001b[1;32m    802\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 803\u001b[0;31m             \u001b[0mmsg_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_multipart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    804\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mzmq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mZMQError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/zmq/sugar/socket.py\u001b[0m in \u001b[0;36mrecv_multipart\u001b[0;34m(self, flags, copy, track)\u001b[0m\n\u001b[1;32m    618\u001b[0m         \"\"\"\n\u001b[0;32m--> 619\u001b[0;31m         \u001b[0mparts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    620\u001b[0m         \u001b[0;31m# have first part already, only loop while more to receive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket._recv_copy\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/zmq/backend/cython/checkrc.pxd\u001b[0m in \u001b[0;36mzmq.backend.cython.checkrc._check_rc\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: ","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-18f6bf35d667>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mroster\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mdone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mdone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Enter a name for the roster, enter 'done' when you are done.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0;32mwhile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdone\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"done\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mdone\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"done\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    702\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 704\u001b[0;31m             \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    705\u001b[0m         )\n\u001b[1;32m    706\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    732\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    733\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 734\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    735\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    736\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"VfCfz14a1C7e"},"source":["#Comparing Lists\n","\n","There are a number of ways to compare if two lists equal each other.  Checkout this [resource at geeksforgeeks.org](https://www.geeksforgeeks.org/python-check-if-two-lists-are-identical/) to see different approaches.\n","\n","\n","\n","#Quirks of Lists\n","If a list is created in a function heading it will still exist between calls to the function.  The list is only created once when it is first called and then it exists for subsequent calls.  If you want a new list for each function call you need to set the list to \"None\" in the function parameter list.  Look at the two examples below.  The first one has a list that will exist between calls and the second set of code will create a new list for each function call."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0EEiRM9zxsbR","executionInfo":{"status":"ok","timestamp":1621967719637,"user_tz":240,"elapsed":730,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"2b0e8c99-78a9-4213-e06a-3112ae5e3d8d"},"source":["print(\"\\n ************** list = [] *******************\")\n","\n","\n","def add(x, lst = []):\n","  if x not in lst:\n","    lst.append(x)\n","  return lst\n","\n","list1 = add(1)\n","print(\"list1\", list1)\n","\n","list2 = add(2)\n","print(\"list2\", list2)\n","\n","list3 = add(3, [11, 12, 13, 14])\n","print(\"list3\", list3)\n","\n","list4 = add(4)\n","print(\"list4\", list4)\n","\n","list5 = add(5)\n","print(\"list4\", list4)\n","\n","\n","print(\"\\n ************** None List *******************\")\n","\n","def add2(x, lst = None):\n","  if lst == None:\n","    lst = []\n","  if x not in lst:\n","    lst.append(x)\n","  return lst\n","\n","list5 = add2(1)\n","print(\"list5\", list5)\n","\n","list6 = add2(2)\n","print(\"list6\", list6)\n","\n","list7 = add2(3, [11, 12, 13, 14])\n","print(\"list7\", list7)\n","\n","list8 = add2(4)\n","print(\"list8\", list8)\n","\n","list9 = add2(9)\n","print(\"list8\", list9)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\n"," ************** list = [] *******************\n","list1 [1]\n","list2 [1, 2]\n","list3 [11, 12, 13, 14, 3]\n","list4 [1, 2, 4]\n","list4 [1, 2, 4, 5]\n","\n"," ************** None List *******************\n","list5 [1]\n","list6 [2]\n","list7 [11, 12, 13, 14, 3]\n","list8 [4]\n","list8 [9]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4sdRiPXhxsY1"},"source":[""],"execution_count":null,"outputs":[]}]}