{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Unit 8 Classes","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPOpmaHRjCxgh4ikkOVTcJA"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"SyMfWjE0Pu-g"},"source":["[Learning Plan Index](https://docs.google.com/document/d/1B5yWb6wCSRhqD42iWxCi7bmLPY2EqvU6pbiEQT0zs20/edit?usp=sharing)\n","\n","\n","[08P - 01 - Unit 8 Class & Object Problems](https://docs.google.com/document/d/1kESUpjdryY9dPhKS_IpvtoyIGH1-s34bWkP735uyJdg/edit?usp=sharing)\n","\n","#Classes and Object Oriented Programming\n","Classes allow us to make objects, which allow for Object Oriented Programming.  OOP was one of the off shoots of the [software crisis](https://en.wikipedia.org/wiki/Software_crisis) that started in the late 60's.  The challenges with software development really became apparent with the advent of Graphical User Interfaces or GUI (pronounced gooey).  The need for OOP really came into play with the GUI.\n","\n","An object is like a complex variable.  A variable allows a programmer to store something in a named memory space.  An object is like a variable in that the computer will create a space in memory where I can store the object.  The object will contain (encapsulate) variables and methods that allows it to store data and perform actions.  The object variables will store data and the methods will perform actions and interactions. A method is just a function that is defined within the object's class.  Each object that is created will have their own copy of the class variables and the class methods encapsulated (contained) within the object.  "]},{"cell_type":"code","metadata":{"id":"kg2aivKrUtHq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622133411770,"user_tz":240,"elapsed":13,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"166fe06c-d846-4229-df5b-3bed061b70ee"},"source":["from datetime import date #import date to calculate age of person\n","\n","#creation of a class called person that will store basic information about a person\n","#classes should always start with a capital letter\n","class Person:\n","  #Constructor - method below is only called when we create (construct) an object\n","  def __init__(self, name = \"none\", birthday = date(1997, 2, 3), gender=\"female\", job=\"student\"):\n","    self.name = name\n","    self.birthday = birthday\n","    self.age = self.calculateAge(self.birthday)\n","    self.gender = gender\n","    self.job = job\n","\n","  #method returns int age by comparing computers current date to given birthdate\n","  def calculateAge(self, birthDate): #this method returns the age of a Person object based on their birthdate, this method is called on line#10\n","    today = date.today() \n","    age = today.year - birthDate.year - ((today.month, today.day) < (birthDate.month, birthDate.day)) \n","    return age \n","\n","#the two lines below are creating two different objects (gordon & student) of the Person class\n","gordon = Person(\"Gordon\", date(1965,10,7), \"male\", \"teacher\")\n","student = Person(\"Stewy\", date(2005,3,17))\n","\n","\n","\n","print(gordon.name, \"has a birthday on\", gordon.birthday, \"and is currently\", gordon.age, \"years old and is a\", gordon.gender, \"who is a\", gordon.job, \"for a living\")\n","\n","print(student.name, \"has a birthday on\", student.birthday, \"and is currently\", student.age, \"years old and is a\", student.gender, \"who is a\", student.job, \"for a living\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Gordon has a birthday on 1965-10-07 and is currently 55 years old and is a male who is a teacher for a living\n","Stewy has a birthday on 2005-03-17 and is currently 16 years old and is a female who is a student for a living\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KDfL1BlQAoxs"},"source":["#Constructor\n","\n","The constructor is a key element of a class, a constructor is where we define all the variables of a class as well as assign values to those variables.  Python only allows for a single construction, there is no overloading of methods in python.  The constructor is called when an object is created (constructed), and the purpose of the constructor is to set the class variables to some initial starting value when an object is created.\n","\n","\n","```\n","# Sample Constructor of a turtle cirlce class\n","def __init__(self, \", color=\"red\", x=0, y=0, fred=50):\n","    self.color = color\n","    self.x = x\n","    self.y = y\n","    self.radius = fred\n","```\n","The keyword \"self\" refers to the object itself.  So whatever object is calling the method or using the variable is the self.   In the line self.color = color, the \"self.color\" is a class variable and it will exist as long as the object does.  The \"color\" variable is a parameter being used to pass a value into the object's \"self.color\" variable, the color parameter will only exist within the constructor.  The class variable name and parameter name do not have to be the same as we see on the line self.radius = fred.  fred is the parameter, and a terrible parameter name, but it demonstrates that the parameter and class variable do not have to be named the same.\n","\n","All methods within a class must have at least the \"self\" keyword in their parameters, even if there are no other parameters.  Again think of this as the object making the call passing itself into the method so that any actions taken are taken on the object that is doing the calling.  The self keyword also applies to all class variables which must begin with the \"self.\" reference.  \n","\n","#Protecting Class Data Fields\n","Object data fields, (class variables), should be made private so that they cannot be accessed outside of the class.  This was NOT done in the Person class example above.  Private data fields (class variables) makes objects less prone to bugs, and easier to maintain.  Instead of direct access our classes should have setter and getter methods that allows us to change a variable to an appropriate value or retrieve the current value of a variable. \n","\n","To make a data field private you need to put two \"_\" (underscore) in front of the variable name in the constructor and whenever you reference the variable in the class.  So to make radius private my constructor should have self.__radius = radius, instead of self.radius = radius.  Underscores have special meaning in Python check out this [Image Source](https://dbader.org/blog/meaning-of-underscores-in-python).\n","\n","![alt text](http://gwebblog.com/pics/Python_Var_Unit8.PNG)\n","\n","The program below is going to make \"basher\" objects that have private fields.  These objects will be created with random values for their health, damage, and name. Each round the bashers will generate a random number with the higher number winning.  The winning basher will extract their damage points from the other basher's health.\n"]},{"cell_type":"code","metadata":{"id":"ZWzyNlMgBdV_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1622135298409,"user_tz":240,"elapsed":4958,"user":{"displayName":"Gordon Reynolds","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjGoYPRcMA4nR0qsuORT0NMtQ82CEGrL0v9oloo=s64","userId":"02111247687678533158"}},"outputId":"b39777c3-2498-43e1-9116-8d0320c81844"},"source":["import random  #needed for generating random numbers\n","\n","#meaningless class that allows for Basher objects to battle (bash) and damage each other\n","#basher has health for survival, damage for damage inflicted, a name, and an attack that is reset for each battle\n","class Basher:\n","  #constructor set private class variable values\n","  def __init__(self, health=5, damage=5, name=\"fred\", attack=0):\n","    self.__health = health\n","    self.__damage = damage\n","    self.__name = name\n","    self.__attack = attack\n","\n","  #getters return the value of class variables \n","  def getHealth(self):\n","    return self.__health\n","\n","  def getDamage(self):\n","    return self.__damage\n","\n","  def getName(self):\n","    return self.__name\n","  \n","  def getAttack(self):\n","    return self.__attack\n","\n","  #setters allow for the changing of class variables provided they are within certain parameters that are hopefully set in the method. \n","  #this method should check to make sure that what is being passed in is an int, but it doesn't\n","  #this method resets a bashers health after it has lost an attack\n","  def setHealth(self, change):\n","    if change > self.__health:\n","      self.__health = 0\n","    else:\n","      self.__health -= change\n","  \n","  #This method sets the attack variable to a random number\n","  #this needs to be stored in a variable because it needs to be used on more than once during each battle\n","  def setAttack(self):\n","    self.__attack = random.randint(0,20)\n","  \n","  #overridding how the object will appear when printed. In Java this would be the toString() method\n","  #comment this block out and see what the game output is\n","  def __str__(self):\n","     return self.__name + \" has \" + str(self.__health) + \" health and does \" + str(self.__damage) + \" of damage each attack\"\n","\n","\n","##################### end class ########################################\n","\n","#Above in the class are methods, they are different from a function because they are defined in a class\n","#Below is a function. it is defined by itself in the program so it is a function, not a method.\n","\n","#both are named blocks of code that can be called.  Methods can only be called by objects of their class.\n","\n","\n","#this will return a list of different numNames from the name list\n","def nameGenerator(numNames):\n","  returnList = list()\n","  names = list([\"Thudder\", \"Banger\", \"Masher\", \"Crusher\", \"Buster\", \"Slammer\", \"Hammer\", \"Dave\"])\n","  if(numNames > len(names)): \n","    returnList = names * int(numNames/3)\n","    return returnList #if numNames is greater than the list send really big list with multiple copies of names back\n","  while(numNames < len(names) and numNames > 0):\n","    indexer = random.randrange(0,len(names))\n","    if(not(names[indexer] in returnList)):\n","      numNames -= 1\n","      returnList.append(names[indexer])\n","\n","  return returnList #list has numNames of different names from names list\n","\n","#get two different names from nameGenerator\n","thenames = nameGenerator(2)\n","\n","#create ()\n","basher1 = Basher(random.randint(3,7), random.randint(2,5), thenames[0])\n","basher2 = Basher(random.randint(3,7), random.randint(2,5), thenames[1])\n","\n","print(basher1)\n","print(basher2)\n","\n","battle = True\n","\n","while(battle):\n","  x = input(\"Hit enter for a basher battle\")\n","  basher1.setAttack()\n","  basher2.setAttack()\n","  winner = None\n","  loser = None\n","  if (basher1.getAttack() == basher2.getAttack()):\n","    print(\"battle was a draw - no damage\")\n","  elif(basher1.getAttack() > basher2.getAttack()):\n","    basher2.setHealth(basher1.getDamage())\n","    winner = basher1\n","    loser = basher2\n","  else:\n","    basher1.setHealth(basher2.getDamage())\n","    winner = basher2\n","    loser = basher1\n","    \n","  if(basher1.getHealth() == 0 or basher2.getHealth() == 0):\n","      battle = False\n","      \n","  print(\"Battle Winner is:\", winner)\n","  print(\"Battle Loser is:\", loser)\n","  print()\n","\n","print() \n","print(\"******** Battle Over *********\")\n","print(\"The Winner is:\")\n","print(winner)\n","print()\n","print(\"The Loser is:\")\n","print(loser)\n","\n","\n","#if you uncomment either of the lines of code below there will be an error because the basher class  \n","#has private data fields and if I try direct access that causes an error\n","\n","#print(basher1.__name)\n","#print(basher1.name)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Hammer has 3 health and does 4 of damage each attack\n","Banger has 3 health and does 5 of damage each attack\n","Hit enter for a basher battle\n","Battle Winner is: Hammer has 3 health and does 4 of damage each attack\n","Battle Loser is: Banger has 0 health and does 5 of damage each attack\n","\n","\n","******** Battle Over *********\n","The Winner is:\n","Hammer has 3 health and does 4 of damage each attack\n","\n","The Loser is:\n","Banger has 0 health and does 5 of damage each attack\n"],"name":"stdout"}]}]}